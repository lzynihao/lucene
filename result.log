
***** Found reference cycle *****
Entry<?> -> (superclass Reference<Version<?>> has (field referent with type Version<?>))
Version<?> -> (field promise with type Entry<?>)
----- Full Types -----
Ljava/lang/ClassValue$Entry<*>;
Ljava/lang/ClassValue$Version<*>;

***** Found reference cycle *****
ClassValue<?> -> (field version with type Version<?>)
Version<?> -> (field classValue with type ClassValue<?>)
----- Full Types -----
Ljava/lang/ClassValue<*>;
Ljava/lang/ClassValue$Version<*>;

***** Found reference cycle *****
KeySetView<ReaderFinishedListener, Boolean> -> (superclass CollectionView<ReaderFinishedListener, Boolean, ReaderFinishedListener> has (field map with type ConcurrentHashMap<ReaderFinishedListener, Boolean>))
ConcurrentHashMap<ReaderFinishedListener, Boolean> -> (field keySet with type KeySetView<ReaderFinishedListener, Boolean>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;
Ljava/util/concurrent/ConcurrentHashMap<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;

***** Found reference cycle *****
ValuesView<ReaderFinishedListener, Boolean> -> (superclass CollectionView<ReaderFinishedListener, Boolean, Boolean> has (field map with type ConcurrentHashMap<ReaderFinishedListener, Boolean>))
ConcurrentHashMap<ReaderFinishedListener, Boolean> -> (field values with type ValuesView<ReaderFinishedListener, Boolean>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;
Ljava/util/concurrent/ConcurrentHashMap<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;

***** Found reference cycle *****
EntrySetView<ReaderFinishedListener, Boolean> -> (superclass CollectionView<ReaderFinishedListener, Boolean, Entry<ReaderFinishedListener, Boolean>> has (field map with type ConcurrentHashMap<ReaderFinishedListener, Boolean>))
ConcurrentHashMap<ReaderFinishedListener, Boolean> -> (field entrySet with type EntrySetView<ReaderFinishedListener, Boolean>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;
Ljava/util/concurrent/ConcurrentHashMap<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;

***** Found reference cycle *****
CollectionView<ReaderFinishedListener, Boolean, Boolean> -> (field map with type ConcurrentHashMap<ReaderFinishedListener, Boolean>)
ConcurrentHashMap<ReaderFinishedListener, Boolean> -> (superclass AbstractMap<ReaderFinishedListener, Boolean> has (CollectionView<ReaderFinishedListener, Boolean, Boolean> subtype of (field values with type Collection<Boolean>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;Ljava/lang/Boolean;>;
Ljava/util/concurrent/ConcurrentHashMap<Lorg/apache/lucene/index/IndexReader$ReaderFinishedListener;Ljava/lang/Boolean;>;

***** Found reference cycle *****
Era -> (Date subtype of (field sinceDate with type CalendarDate))
Date -> (superclass CalendarDate has (field era with type Era))
----- Full Types -----
Lsun/util/calendar/Era;
Lsun/util/calendar/BaseCalendar$Date;

***** Found reference cycle *****
CalendarDate -> (field era with type Era)
Era -> (field sinceDate with type CalendarDate)
----- Full Types -----
Lsun/util/calendar/CalendarDate;
Lsun/util/calendar/Era;

***** Found reference cycle *****
SpansCell -> (outer class NearSpansUnordered)
NearSpansUnordered -> (field first with type SpansCell)
----- Full Types -----
Lorg/apache/lucene/search/spans/NearSpansUnordered.SpansCell;
Lorg/apache/lucene/search/spans/NearSpansUnordered;

***** Found reference cycle *****
CellQueue -> (superclass PriorityQueue<SpansCell> has (field heap with type SpansCell))
SpansCell -> (outer class NearSpansUnordered)
NearSpansUnordered -> (field queue with type CellQueue)
----- Full Types -----
Lorg/apache/lucene/search/spans/NearSpansUnordered.CellQueue;
Lorg/apache/lucene/search/spans/NearSpansUnordered.SpansCell;
Lorg/apache/lucene/search/spans/NearSpansUnordered;

***** Found reference cycle *****
FilteredQuery -> (QueryWrapperFilter subtype of (field filter with type Filter))
QueryWrapperFilter -> (FilteredQuery subtype of (field query with type Query))
----- Full Types -----
Lorg/apache/lucene/search/FilteredQuery;
Lorg/apache/lucene/search/QueryWrapperFilter;

***** Found reference cycle *****
ConstantScoreQuery -> (QueryWrapperFilter subtype of (field filter with type Filter))
QueryWrapperFilter -> (ConstantScoreQuery subtype of (field query with type Query))
----- Full Types -----
Lorg/apache/lucene/search/ConstantScoreQuery;
Lorg/apache/lucene/search/QueryWrapperFilter;

***** Found reference cycle *****
FileInputStream -> (field fd with type FileDescriptor)
FileDescriptor -> (InputStreamDataInput subtype of (field parent with type Closeable))
InputStreamDataInput -> (FileInputStream subtype of (field is with type InputStream))
----- Full Types -----
Ljava/io/FileInputStream;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/store/InputStreamDataInput;

***** Found reference cycle *****
Semaphore -> (field sync with type Sync)
Sync -> (superclass AbstractOwnableSynchronizer has (NRTManagerReopenThread subtype of (field exclusiveOwnerThread with type Thread)))
NRTManagerReopenThread -> (field manager with type NRTManager)
NRTManager -> (field withoutDeletes with type SearcherManagerRef)
SearcherManagerRef -> (field manager with type SearcherManager)
SearcherManager -> (field reopenLock with type Semaphore)
----- Full Types -----
Ljava/util/concurrent/Semaphore;
Ljava/util/concurrent/Semaphore$Sync;
Lorg/apache/lucene/search/NRTManagerReopenThread;
Lorg/apache/lucene/search/NRTManager;
Lorg/apache/lucene/search/NRTManager$SearcherManagerRef;
Lorg/apache/lucene/search/SearcherManager;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP94!>;>;
Ljava/lang/Class$ReflectionData<!CAP94!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP94!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP94!>;
Ljava/lang/Class<!CAP94!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP30!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP30!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP30!>;>;

***** Found reference cycle *****
ReflectionData<Double> -> (field declaredConstructors with type Constructor<Double>)
Constructor<Double> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<Double> subtype of (field returnType with type Type))
Class<Double> -> (field reflectionData with type SoftReference<ReflectionData<Double>>)
SoftReference<ReflectionData<Double>> -> (superclass Reference<ReflectionData<Double>> has (field referent with type ReflectionData<Double>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Ljava/lang/Double;>;
Ljava/lang/reflect/Constructor<Ljava/lang/Double;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Ljava/lang/Double;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Double;>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP77!>;>;
Ljava/lang/Class$ReflectionData<!CAP77!>;
Ljava/lang/reflect/Constructor<!CAP77!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP77!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP59!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP59!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP24!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends IndexReader>> -> (superclass Reference<ReflectionData<? extends IndexReader>> has (field referent with type ReflectionData<? extends IndexReader>))
ReflectionData<? extends IndexReader> -> (field declaredConstructors with type Constructor<? extends IndexReader>)
Constructor<? extends IndexReader> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<? extends IndexReader> subtype of (field parameterTypeCache with type Type))
Class<? extends IndexReader> -> (field reflectionData with type SoftReference<ReflectionData<? extends IndexReader>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/index/IndexReader;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/index/IndexReader;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/index/IndexReader;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<+Lorg/apache/lucene/index/IndexReader;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP100!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP100!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP100!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP76!>;
Ljava/lang/reflect/Constructor<!CAP76!>;
Ljava/lang/Class<!CAP76!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP76!>;>;

***** Found reference cycle *****
HashMap<Query, Object> -> (superclass AbstractMap<Query, Object> has (HashSet<Query> subtype of (field keySet with type Set<Query>)))
HashSet<Query> -> (field map with type HashMap<Query, Object>)
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/search/Query;Ljava/lang/Object;>;
Ljava/util/HashSet<Lorg/apache/lucene/search/Query;>;

***** Found reference cycle *****
IndexFileDeleter -> (field writer with type IndexWriter)
IndexWriter -> (field deleter with type IndexFileDeleter)
----- Full Types -----
Lorg/apache/lucene/index/IndexFileDeleter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
Node<Thread, DocumentsWriterThreadState> -> (field value with type DocumentsWriterThreadState)
DocumentsWriterThreadState -> (field docState with type DocState)
DocState -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field threadBindings with type HashMap<Thread, DocumentsWriterThreadState>)
HashMap<Thread, DocumentsWriterThreadState> -> (field table with type Node<Thread, DocumentsWriterThreadState>)
----- Full Types -----
Ljava/util/HashMap$Node<Ljava/lang/Thread;Lorg/apache/lucene/index/DocumentsWriterThreadState;>;
Lorg/apache/lucene/index/DocumentsWriterThreadState;
Lorg/apache/lucene/index/DocumentsWriter$DocState;
Lorg/apache/lucene/index/DocumentsWriter;
Ljava/util/HashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/DocumentsWriterThreadState;>;

***** Found reference cycle *****
ParallelTermEnum -> (outer class ParallelReader)
ParallelReader -> (HashMap<IndexReader, Collection<String>> subtype of (field readerToFields with type Map<IndexReader, Collection<String>>))
HashMap<IndexReader, Collection<String>> -> (field table with type Node<IndexReader, Collection<String>>)
Node<IndexReader, Collection<String>> -> (SegmentReader subtype of (field key with type IndexReader))
SegmentReader -> (field core with type SegmentCoreReaders)
SegmentCoreReaders -> (MMapIndexInput subtype of (field freqStream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass PostingsAndFreq has (MultiTermPositions subtype of (field postings with type TermPositions)))
MultiTermPositions -> (superclass MultiTermDocs has (field smi with type SegmentMergeInfo))
SegmentMergeInfo -> (ParallelTermEnum subtype of (field termEnum with type TermEnum))
----- Full Types -----
Lorg/apache/lucene/index/ParallelReader.ParallelTermEnum;
Lorg/apache/lucene/index/ParallelReader;
Ljava/util/HashMap<Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection<Ljava/lang/String;>;>;
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection<Ljava/lang/String;>;>;
Lorg/apache/lucene/index/SegmentReader;
Lorg/apache/lucene/index/SegmentCoreReaders;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP41!>;
!CAP41!
Lorg/apache/lucene/index/DirectoryReader$MultiTermPositions;
Lorg/apache/lucene/index/SegmentMergeInfo;

***** Found reference cycle *****
ValuesView<String, Object> -> (superclass CollectionView<String, Object, Object> has (field map with type ConcurrentHashMap<String, Object>))
ConcurrentHashMap<String, Object> -> (field values with type ValuesView<String, Object>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP13!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP108!>;>;
Ljava/lang/Class$ReflectionData<!CAP108!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP108!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP47!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP134!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP134!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP134!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP125!>;>;
Ljava/lang/Class$ReflectionData<!CAP125!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP125!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP126!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP20!>;>;
Ljava/lang/Class$ReflectionData<!CAP20!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP20!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP64!>;
Ljava/lang/reflect/Constructor<!CAP64!>;
Ljava/lang/Class<!CAP64!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP64!>;>;

***** Found reference cycle *****
MultiReader -> (HashMap<String, byte[]> subtype of (field normsCache with type Map<String, byte[]>))
HashMap<String, byte[]> -> (superclass AbstractMap<String, byte[]> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (SearcherTracker subtype of (field parent with type Closeable))
SearcherTracker -> (field searcher with type IndexSearcher)
IndexSearcher -> (MultiReader subtype of (field reader with type IndexReader))
----- Full Types -----
Lorg/apache/lucene/index/MultiReader;
Ljava/util/HashMap<Ljava/lang/String;[B>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;
Lorg/apache/lucene/search/IndexSearcher;

***** Found reference cycle *****
SingleInstanceLock -> (field locks with type HashSet<String>)
HashSet<String> -> (field map with type HashMap<String, Object>)
HashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (SingleInstanceLock subtype of (field writeLock with type Lock))
----- Full Types -----
Lorg/apache/lucene/store/SingleInstanceLock;
Ljava/util/HashSet<Ljava/lang/String;>;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP61!>;>;
Ljava/lang/Class$ReflectionData<!CAP61!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP61!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP60!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
HashMap<String, Analyzer> -> (field table with type Node<String, Analyzer>)
Node<String, Analyzer> -> (PerFieldAnalyzerWrapper subtype of (field value with type Analyzer))
PerFieldAnalyzerWrapper -> (HashMap<String, Analyzer> subtype of (field analyzerMap with type Map<String, Analyzer>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;
Ljava/util/HashMap$Node<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;
Lorg/apache/lucene/analysis/PerFieldAnalyzerWrapper;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP110!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SnapshotInfo -> (SnapshotCommitPoint subtype of (field commit with type IndexCommit))
SnapshotCommitPoint -> (outer class SnapshotDeletionPolicy)
SnapshotDeletionPolicy -> (HashMap<String, SnapshotInfo> subtype of (field idToSnapshot with type Map<String, SnapshotInfo>))
HashMap<String, SnapshotInfo> -> (field table with type Node<String, SnapshotInfo>)
Node<String, SnapshotInfo> -> (field value with type SnapshotInfo)
----- Full Types -----
Lorg/apache/lucene/index/SnapshotDeletionPolicy$SnapshotInfo;
Lorg/apache/lucene/index/SnapshotDeletionPolicy.SnapshotCommitPoint;
Lorg/apache/lucene/index/SnapshotDeletionPolicy;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/SnapshotDeletionPolicy$SnapshotInfo;>;
Ljava/util/HashMap$Node<Ljava/lang/String;Lorg/apache/lucene/index/SnapshotDeletionPolicy$SnapshotInfo;>;

***** Found reference cycle *****
ReflectionData<C> -> (field declaredConstructors with type Constructor<C>)
Constructor<C> -> (field clazz with type Class<C>)
Class<C> -> (field reflectionData with type SoftReference<ReflectionData<C>>)
SoftReference<ReflectionData<C>> -> (superclass Reference<ReflectionData<C>> has (field referent with type ReflectionData<C>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/reflect/Constructor<T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/Class<T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<T:org/apache/lucene/util/VirtualMethod:C;>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP71!>;
Ljava/lang/reflect/Constructor<!CAP71!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP58!>;
Ljava/lang/reflect/Constructor<!CAP58!>;

***** Found reference cycle *****
Class<AttributeImpl> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<AttributeImpl> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
AbstractField -> (Tokenizer subtype of (field tokenStream with type TokenStream))
Tokenizer -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (FileInputStream subtype of (field in with type InputStream))
FileInputStream -> (field channel with type FileChannel)
FileChannel -> (superclass AbstractInterruptibleChannel has (MergeThread subtype of (field interrupted with type Thread)))
MergeThread -> (field tWriter with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (AbstractField subtype of (field fields with type Fieldable))
----- Full Types -----
Lorg/apache/lucene/document/AbstractField;
Lorg/apache/lucene/analysis/Tokenizer;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/io/FileInputStream;
Ljava/nio/channels/FileChannel;
Lorg/apache/lucene/index/ConcurrentMergeScheduler.MergeThread;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP102!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
Class<Similarity> -> (field cachedConstructor with type Constructor<Similarity>)
Constructor<Similarity> -> (field clazz with type Class<Similarity>)
----- Full Types -----
Ljava/lang/Class<Lorg/apache/lucene/search/Similarity;>;
Ljava/lang/reflect/Constructor<Lorg/apache/lucene/search/Similarity;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP9!>;
Ljava/lang/reflect/Constructor<!CAP9!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP9!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP9!>;>;

***** Found reference cycle *****
ReflectionData<? extends C> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<? extends C> subtype of (field paramTypes with type Type))
Class<? extends C> -> (field reflectionData with type SoftReference<ReflectionData<? extends C>>)
SoftReference<ReflectionData<? extends C>> -> (superclass Reference<ReflectionData<? extends C>> has (field referent with type ReflectionData<? extends C>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<+T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<+T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+T:org/apache/lucene/util/VirtualMethod:C;>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP44!>;>;
Ljava/lang/Class$ReflectionData<!CAP44!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP44!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP88!>;
Ljava/lang/reflect/Constructor<!CAP88!>;
Ljava/lang/Class<!CAP88!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP88!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP83!>;
Ljava/lang/reflect/Constructor<!CAP83!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP12!>;
Ljava/lang/reflect/Constructor<!CAP12!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP25!>;
Ljava/lang/Class<!CAP25!>;

***** Found reference cycle *****
DocInverterPerThread -> (TermsHashPerThread subtype of (field consumer with type InvertedDocConsumerPerThread))
TermsHashPerThread -> (field charPool with type CharBlockPool)
CharBlockPool -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
----- Full Types -----
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/TermsHashPerThread;
Lorg/apache/lucene/index/CharBlockPool;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;

***** Found reference cycle *****
SegmentInfos -> (AbstractMap<String, String> subtype of (field userData with type Map<String, String>))
AbstractMap<String, String> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field pendingCommit with type SegmentInfos)
----- Full Types -----
Lorg/apache/lucene/index/SegmentInfos;
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
Class<? extends QueryParser> -> (field cachedConstructor with type Constructor<? extends QueryParser>)
Constructor<? extends QueryParser> -> (field clazz with type Class<? extends QueryParser>)
----- Full Types -----
Ljava/lang/Class<+Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/queryParser/QueryParser;>;

***** Found reference cycle *****
Charset -> (KeySetView<String, RAMFile> subtype of (field aliasSet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field infoStream with type PrintStream)
PrintStream -> (field charOut with type OutputStreamWriter)
OutputStreamWriter -> (field se with type StreamEncoder)
StreamEncoder -> (field cs with type Charset)
----- Full Types -----
Ljava/nio/charset/Charset;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Ljava/io/PrintStream;
Ljava/io/OutputStreamWriter;
Lsun/nio/cs/StreamEncoder;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP82!>;
Ljava/lang/Class<!CAP82!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP1!>;>;
Ljava/lang/Class$ReflectionData<!CAP1!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP1!>;

***** Found reference cycle *****
AbstractMap<String, Integer> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Integer> subtype of (field parameterTypeCache with type Type))
Class<Integer> -> (AbstractMap<String, Integer> subtype of (field enumConstantDirectory with type Map<String, Integer>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/Integer;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Integer;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP70!>;
Ljava/lang/Class<!CAP70!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP4!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP70!>;>;
Ljava/lang/Class$ReflectionData<!CAP70!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP70!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP29!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP29!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP29!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP114!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
DocInverterPerField -> (field docState with type DocState)
DocState -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (DocInverterPerField subtype of (field consumer with type DocFieldConsumerPerField))
----- Full Types -----
Lorg/apache/lucene/index/DocInverterPerField;
Lorg/apache/lucene/index/DocumentsWriter$DocState;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP122!>;
Ljava/lang/reflect/Constructor<!CAP122!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP122!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP122!>;>;

***** Found reference cycle *****
QueryParserTokenManager -> (FastCharStream subtype of (field input_stream with type CharStream))
FastCharStream -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (MappedByteBuffer subtype of (field bb with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<QueryParser> subtype of (field returnType with type Type))
Class<QueryParser> -> (? extends QueryParser subtype of (field enumConstants with type QueryParser))
? extends QueryParser -> (superclass QueryParser has (field token_source with type QueryParserTokenManager))
----- Full Types -----
Lorg/apache/lucene/queryParser/QueryParserTokenManager;
Lorg/apache/lucene/queryParser/FastCharStream;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;
+Lorg/apache/lucene/queryParser/QueryParser;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP46!>;
Ljava/lang/reflect/Constructor<!CAP46!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP52!>;
Ljava/lang/reflect/Constructor<!CAP52!>;
Ljava/lang/Class<!CAP52!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP52!>;>;

***** Found reference cycle *****
CollectionView<Long, SearcherTracker, SearcherTracker> -> (field map with type ConcurrentHashMap<Long, SearcherTracker>)
ConcurrentHashMap<Long, SearcherTracker> -> (superclass AbstractMap<Long, SearcherTracker> has (CollectionView<Long, SearcherTracker, SearcherTracker> subtype of (field values with type Collection<SearcherTracker>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP23!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP69!>;>;
Ljava/lang/Class$ReflectionData<!CAP69!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP69!>;

***** Found reference cycle *****
DocFieldConsumer -> (field fieldInfos with type FieldInfos)
FieldInfos -> (field byName with type HashMap<String, FieldInfo>)
HashMap<String, FieldInfo> -> (superclass AbstractMap<String, FieldInfo> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (field consumer with type DocFieldConsumer)
----- Full Types -----
Lorg/apache/lucene/index/DocFieldConsumer;
Lorg/apache/lucene/index/FieldInfos;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/FieldInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP14!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP101!>;>;
Ljava/lang/Class$ReflectionData<!CAP101!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP101!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP69!>;
Ljava/lang/Class<!CAP69!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP86!>;
Ljava/lang/reflect/Constructor<!CAP86!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP86!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP86!>;>;

***** Found reference cycle *****
ReflectionData<CharTokenizer> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<CharTokenizer> subtype of (field genericType with type Type))
Class<CharTokenizer> -> (field reflectionData with type SoftReference<ReflectionData<CharTokenizer>>)
SoftReference<ReflectionData<CharTokenizer>> -> (superclass Reference<ReflectionData<CharTokenizer>> has (field referent with type ReflectionData<CharTokenizer>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/analysis/CharTokenizer;>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/analysis/CharTokenizer;>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<Integer>> -> (superclass Reference<ReflectionData<Integer>> has (field referent with type ReflectionData<Integer>))
ReflectionData<Integer> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<Integer> subtype of (field returnType with type Type))
Class<Integer> -> (field reflectionData with type SoftReference<ReflectionData<Integer>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Integer;>;>;
Ljava/lang/Class$ReflectionData<Ljava/lang/Integer;>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Ljava/lang/Integer;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP81!>;
Ljava/lang/reflect/Constructor<!CAP81!>;

***** Found reference cycle *****
PerDoc -> (outer class TermVectorsTermsWriter)
TermVectorsTermsWriter -> (field docFreeList with type PerDoc)
----- Full Types -----
Lorg/apache/lucene/index/TermVectorsTermsWriter.PerDoc;
Lorg/apache/lucene/index/TermVectorsTermsWriter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP116!>;>;
Ljava/lang/Class$ReflectionData<!CAP116!>;
Ljava/lang/reflect/Constructor<!CAP116!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP116!>;

***** Found reference cycle *****
Formatter -> (PrintStream subtype of (field a with type Appendable))
PrintStream -> (field formatter with type Formatter)
----- Full Types -----
Ljava/util/Formatter;
Ljava/io/PrintStream;

***** Found reference cycle *****
DirectoryReader -> (NativeFSLock subtype of (field writeLock with type Lock))
NativeFSLock -> (Descriptor subtype of (field f with type RandomAccessFile))
Descriptor -> (superclass RandomAccessFile has (field fd with type FileDescriptor))
FileDescriptor -> (SearcherTracker subtype of (field parent with type Closeable))
SearcherTracker -> (field searcher with type IndexSearcher)
IndexSearcher -> (DirectoryReader subtype of (field reader with type IndexReader))
----- Full Types -----
Lorg/apache/lucene/index/DirectoryReader;
Lorg/apache/lucene/store/NativeFSLock;
Lorg/apache/lucene/store/SimpleFSDirectory$SimpleFSIndexInput$Descriptor;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;
Lorg/apache/lucene/search/IndexSearcher;

***** Found reference cycle *****
HashMap<SegmentInfo, SegmentReader> -> (field table with type Node<SegmentInfo, SegmentReader>)
Node<SegmentInfo, SegmentReader> -> (ReadOnlySegmentReader subtype of (field value with type SegmentReader))
ReadOnlySegmentReader -> (superclass SegmentReader has (field core with type SegmentCoreReaders))
SegmentCoreReaders -> (MMapIndexInput subtype of (field freqStream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (IndexWriter subtype of (field parent with type Closeable))
IndexWriter -> (field readerPool with type ReaderPool)
ReaderPool -> (HashMap<SegmentInfo, SegmentReader> subtype of (field readerMap with type Map<SegmentInfo, SegmentReader>))
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;
Lorg/apache/lucene/index/ReadOnlySegmentReader;
Lorg/apache/lucene/index/SegmentCoreReaders;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/IndexWriter.ReaderPool;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP53!>;>;
Ljava/lang/Class$ReflectionData<!CAP53!>;
Ljava/lang/reflect/Constructor<!CAP53!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP53!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP117!>;>;
Ljava/lang/Class$ReflectionData<!CAP117!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP117!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP48!>;
Ljava/lang/reflect/Constructor<!CAP48!>;

***** Found reference cycle *****
HashMap<Thread, T> -> (field table with type Node<Thread, T>)
Node<Thread, T> -> (NRTManagerReopenThread subtype of (field key with type Thread))
NRTManagerReopenThread -> (field manager with type NRTManager)
NRTManager -> (field writer with type IndexWriter)
IndexWriter -> (ConcurrentMergeScheduler subtype of (field mergeScheduler with type MergeScheduler))
ConcurrentMergeScheduler -> (CompoundFileReader subtype of (field dir with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (CloseableThreadLocal<T> subtype of (field parent with type Closeable))
CloseableThreadLocal<T> -> (HashMap<Thread, T> subtype of (field hardRefs with type Map<Thread, T>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/Thread;T:org/apache/lucene/util/CloseableThreadLocal:T;>;
Ljava/util/HashMap$Node<Ljava/lang/Thread;T:org/apache/lucene/util/CloseableThreadLocal:T;>;
Lorg/apache/lucene/search/NRTManagerReopenThread;
Lorg/apache/lucene/search/NRTManager;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/ConcurrentMergeScheduler;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/util/CloseableThreadLocal<TT;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP92!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP92!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP120!>;
Ljava/lang/Class<!CAP120!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP124!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP124!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP124!>;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP6!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP54!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP54!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP54!>;>;

***** Found reference cycle *****
ByteBlockAllocator -> (outer class DocumentsWriter)
DocumentsWriter -> (field byteBlockAllocator with type ByteBlockAllocator)
----- Full Types -----
Lorg/apache/lucene/index/DocumentsWriter.ByteBlockAllocator;
Lorg/apache/lucene/index/DocumentsWriter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP112!>;
Ljava/lang/reflect/Constructor<!CAP112!>;
Ljava/lang/Class<!CAP112!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP112!>;>;

***** Found reference cycle *****
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP42!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP42!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP42!>;>;

***** Found reference cycle *****
AbstractMap<String, SegmentNorms> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field readerPool with type ReaderPool)
ReaderPool -> (HashMap<SegmentInfo, SegmentReader> subtype of (field readerMap with type Map<SegmentInfo, SegmentReader>))
HashMap<SegmentInfo, SegmentReader> -> (field table with type Node<SegmentInfo, SegmentReader>)
Node<SegmentInfo, SegmentReader> -> (field value with type SegmentReader)
SegmentReader -> (AbstractMap<String, SegmentNorms> subtype of (field norms with type Map<String, SegmentNorms>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/index/SegmentNorms;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/IndexWriter.ReaderPool;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;
Lorg/apache/lucene/index/SegmentReader;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP138!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP57!>;
Ljava/lang/Class<!CAP57!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP93!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends Similarity>> -> (superclass Reference<ReflectionData<? extends Similarity>> has (field referent with type ReflectionData<? extends Similarity>))
ReflectionData<? extends Similarity> -> (field declaredConstructors with type Constructor<? extends Similarity>)
Constructor<? extends Similarity> -> (field clazz with type Class<? extends Similarity>)
Class<? extends Similarity> -> (field reflectionData with type SoftReference<ReflectionData<? extends Similarity>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/search/Similarity;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/search/Similarity;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/search/Similarity;>;
Ljava/lang/Class<+Lorg/apache/lucene/search/Similarity;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP8!>;>;
Ljava/lang/Class$ReflectionData<!CAP8!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP8!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP36!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
CharsetEncoder -> (field charset with type Charset)
Charset -> (KeySetView<String, RAMFile> subtype of (field aliasSet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field infoStream with type PrintStream)
PrintStream -> (field charOut with type OutputStreamWriter)
OutputStreamWriter -> (field se with type StreamEncoder)
StreamEncoder -> (field encoder with type CharsetEncoder)
----- Full Types -----
Ljava/nio/charset/CharsetEncoder;
Ljava/nio/charset/Charset;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Ljava/io/PrintStream;
Ljava/io/OutputStreamWriter;
Lsun/nio/cs/StreamEncoder;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP68!>;>;
Ljava/lang/Class$ReflectionData<!CAP68!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP68!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP80!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP132!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP132!>;

***** Found reference cycle *****
Constructor<Boolean> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<Boolean> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<Ljava/lang/Boolean;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP35!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Directory -> (SingleInstanceLockFactory subtype of (field lockFactory with type LockFactory))
SingleInstanceLockFactory -> (field locks with type HashSet<String>)
HashSet<String> -> (field map with type HashMap<String, Object>)
HashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field directory with type Directory)
----- Full Types -----
Lorg/apache/lucene/store/Directory;
Lorg/apache/lucene/store/SingleInstanceLockFactory;
Ljava/util/HashSet<Ljava/lang/String;>;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP98!>;
Ljava/lang/reflect/Constructor<!CAP98!>;
Ljava/lang/Class<!CAP98!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP98!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP104!>;
Ljava/lang/reflect/Constructor<!CAP104!>;

***** Found reference cycle *****
ValuesView<String, RAMFile> -> (superclass CollectionView<String, RAMFile, RAMFile> has (field map with type ConcurrentHashMap<String, RAMFile>))
ConcurrentHashMap<String, RAMFile> -> (field values with type ValuesView<String, RAMFile>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP109!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP107!>;>;
Ljava/lang/Class$ReflectionData<!CAP107!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP107!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP85!>;
Ljava/lang/reflect/Constructor<!CAP85!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP7!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP7!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP7!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<?>> -> (superclass Reference<ReflectionData<?>> has (field referent with type ReflectionData<?>))
ReflectionData<?> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field reflectionData with type SoftReference<ReflectionData<?>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<*>;>;
Ljava/lang/Class$ReflectionData<*>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;

***** Found reference cycle *****
ByteBlockPool -> (ByteBlockAllocator subtype of (field allocator with type Allocator))
ByteBlockAllocator -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (ByteSliceReader subtype of (field stream with type IndexInput))
ByteSliceReader -> (field pool with type ByteBlockPool)
----- Full Types -----
Lorg/apache/lucene/index/ByteBlockPool;
Lorg/apache/lucene/index/DocumentsWriter.ByteBlockAllocator;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/index/ByteSliceReader;

***** Found reference cycle *****
MultiFieldQueryParser -> (superclass QueryParser has (field token_source with type QueryParserTokenManager))
QueryParserTokenManager -> (FastCharStream subtype of (field input_stream with type CharStream))
FastCharStream -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (MappedByteBuffer subtype of (field bb with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<QueryParser> subtype of (field returnType with type Type))
Class<QueryParser> -> (MultiFieldQueryParser subtype of (field enumConstants with type QueryParser))
----- Full Types -----
Lorg/apache/lucene/queryParser/MultiFieldQueryParser;
Lorg/apache/lucene/queryParser/QueryParserTokenManager;
Lorg/apache/lucene/queryParser/FastCharStream;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP27!>;
Ljava/lang/Class<!CAP27!>;

***** Found reference cycle *****
CharsetDecoder -> (field charset with type Charset)
Charset -> (KeySetView<String, RAMFile> subtype of (field aliasSet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field infoStream with type PrintStream)
PrintStream -> (field charOut with type OutputStreamWriter)
OutputStreamWriter -> (field se with type StreamEncoder)
StreamEncoder -> (field encoder with type CharsetEncoder)
CharsetEncoder -> (field cachedDecoder with type WeakReference<CharsetDecoder>)
WeakReference<CharsetDecoder> -> (superclass Reference<CharsetDecoder> has (field referent with type CharsetDecoder))
----- Full Types -----
Ljava/nio/charset/CharsetDecoder;
Ljava/nio/charset/Charset;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Ljava/io/PrintStream;
Ljava/io/OutputStreamWriter;
Lsun/nio/cs/StreamEncoder;
Ljava/nio/charset/CharsetEncoder;
Ljava/lang/ref/WeakReference<Ljava/nio/charset/CharsetDecoder;>;

***** Found reference cycle *****
Constructor<? extends C> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<? extends C> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<+T:org/apache/lucene/util/VirtualMethod:C;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends NLS>> -> (superclass Reference<ReflectionData<? extends NLS>> has (field referent with type ReflectionData<? extends NLS>))
ReflectionData<? extends NLS> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<? extends NLS> subtype of (field parameterTypeCache with type Type))
Class<? extends NLS> -> (field reflectionData with type SoftReference<ReflectionData<? extends NLS>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/messages/NLS;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/messages/NLS;>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<+Lorg/apache/lucene/messages/NLS;>;

***** Found reference cycle *****
SoftReference<ReflectionData<IndexReader>> -> (superclass Reference<ReflectionData<IndexReader>> has (field referent with type ReflectionData<IndexReader>))
ReflectionData<IndexReader> -> (field declaredConstructors with type Constructor<IndexReader>)
Constructor<IndexReader> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<IndexReader> subtype of (field parameterTypeCache with type Type))
Class<IndexReader> -> (field reflectionData with type SoftReference<ReflectionData<IndexReader>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/index/IndexReader;>;>;
Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/index/IndexReader;>;
Ljava/lang/reflect/Constructor<Lorg/apache/lucene/index/IndexReader;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/index/IndexReader;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP15!>;
Ljava/lang/reflect/Constructor<!CAP15!>;
Ljava/lang/Class<!CAP15!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP15!>;>;

***** Found reference cycle *****
EntrySetView<Long, SearcherTracker> -> (superclass CollectionView<Long, SearcherTracker, Entry<Long, SearcherTracker>> has (field map with type ConcurrentHashMap<Long, SearcherTracker>))
ConcurrentHashMap<Long, SearcherTracker> -> (field entrySet with type EntrySetView<Long, SearcherTracker>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP62!>;>;
Ljava/lang/Class$ReflectionData<!CAP62!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP62!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP74!>;
Ljava/lang/Class<!CAP74!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP38!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP27!>;
Ljava/lang/reflect/Constructor<!CAP27!>;
Ljava/lang/Class<!CAP27!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP27!>;>;

***** Found reference cycle *****
AnnotationType -> (HashMap<String, Object> subtype of (field memberDefaults with type Map<String, Object>))
HashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (HashMap<Class<? extends Attribute>, AttributeImpl> subtype of (field attributes with type Map<Class<? extends Attribute>, AttributeImpl>)))
HashMap<Class<? extends Attribute>, AttributeImpl> -> (field table with type Node<Class<? extends Attribute>, AttributeImpl>)
Node<Class<? extends Attribute>, AttributeImpl> -> (field key with type Class<? extends Attribute>)
Class<? extends Attribute> -> (field annotationType with type AnnotationType)
----- Full Types -----
Lsun/reflect/annotation/AnnotationType;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP109!>;>;
Ljava/lang/Class$ReflectionData<!CAP109!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP109!>;

***** Found reference cycle *****
FreqProxTermsWriterPerField -> (field termsHashPerField with type TermsHashPerField)
TermsHashPerField -> (FreqProxTermsWriterPerField subtype of (field consumer with type TermsHashConsumerPerField))
----- Full Types -----
Lorg/apache/lucene/index/FreqProxTermsWriterPerField;
Lorg/apache/lucene/index/TermsHashPerField;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP120!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP120!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP120!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP96!>;
Ljava/lang/reflect/Constructor<!CAP96!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP96!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP96!>;>;

***** Found reference cycle *****
LinkedList<OneMerge> -> (field first with type Node<OneMerge>)
Node<OneMerge> -> (field item with type OneMerge)
OneMerge -> (field info with type SegmentInfo)
SegmentInfo -> (AbstractMap<String, String> subtype of (field diagnostics with type Map<String, String>))
AbstractMap<String, String> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field pendingMerges with type LinkedList<OneMerge>)
----- Full Types -----
Ljava/util/LinkedList<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/LinkedList$Node<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Lorg/apache/lucene/index/MergePolicy$OneMerge;
Lorg/apache/lucene/index/SegmentInfo;
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
CharArraySetIterator -> (outer class CharArraySet)
CharArraySet -> (UnmodifiableCharArrayMap<Object> subtype of (field map with type CharArrayMap<Object>))
UnmodifiableCharArrayMap<Object> -> (superclass AbstractMap<Object, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass PostingsAndFreq has (MultiTermPositions subtype of (field postings with type TermPositions)))
MultiTermPositions -> (superclass MultiTermDocs has (field smi with type SegmentMergeInfo))
SegmentMergeInfo -> (ParallelTermEnum subtype of (field termEnum with type TermEnum))
ParallelTermEnum -> (CharArraySetIterator subtype of (field fieldIterator with type Iterator<String>))
----- Full Types -----
Lorg/apache/lucene/analysis/CharArraySet.CharArraySetIterator;
Lorg/apache/lucene/analysis/CharArraySet;
Lorg/apache/lucene/analysis/CharArrayMap$UnmodifiableCharArrayMap<Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP41!>;
!CAP41!
Lorg/apache/lucene/index/DirectoryReader$MultiTermPositions;
Lorg/apache/lucene/index/SegmentMergeInfo;
Lorg/apache/lucene/index/ParallelReader.ParallelTermEnum;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP59!>;>;
Ljava/lang/Class$ReflectionData<!CAP59!>;
Ljava/lang/reflect/Constructor<!CAP59!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP59!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP50!>;
Ljava/lang/reflect/Constructor<!CAP50!>;
Ljava/lang/Class<!CAP50!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP50!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP106!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP2!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP2!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP124!>;
Ljava/lang/Class<!CAP124!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP102!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP102!>;

***** Found reference cycle *****
RAMInputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (RAMInputStream subtype of (field stream with type IndexInput))
----- Full Types -----
Lorg/apache/lucene/store/RAMInputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;

***** Found reference cycle *****
Node<String, Set<String>> -> (KeySetView<String, RAMFile> subtype of (field value with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (SnapshotDeletionPolicy subtype of (field delPolicy with type IndexDeletionPolicy))
SnapshotDeletionPolicy -> (HashMap<String, Set<String>> subtype of (field segmentsFileToIDs with type Map<String, Set<String>>))
HashMap<String, Set<String>> -> (field table with type Node<String, Set<String>>)
----- Full Types -----
Ljava/util/HashMap$Node<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;
Lorg/apache/lucene/index/SnapshotDeletionPolicy;
Ljava/util/HashMap<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;

***** Found reference cycle *****
PerDoc -> (outer class StoredFieldsWriter)
StoredFieldsWriter -> (field docFreeList with type PerDoc)
----- Full Types -----
Lorg/apache/lucene/index/StoredFieldsWriter.PerDoc;
Lorg/apache/lucene/index/StoredFieldsWriter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP40!>;
Ljava/lang/Class<!CAP40!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP49!>;
Ljava/lang/reflect/Constructor<!CAP49!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP49!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP49!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP26!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP119!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP119!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP119!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP97!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP74!>;
Ljava/lang/reflect/Constructor<!CAP74!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP74!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP74!>;>;

***** Found reference cycle *****
SegmentNorms -> (field owner with type SegmentReader)
SegmentReader -> (HashMap<String, SegmentNorms> subtype of (field norms with type Map<String, SegmentNorms>))
HashMap<String, SegmentNorms> -> (field table with type Node<String, SegmentNorms>)
Node<String, SegmentNorms> -> (field value with type SegmentNorms)
----- Full Types -----
Lorg/apache/lucene/index/SegmentNorms;
Lorg/apache/lucene/index/SegmentReader;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/SegmentNorms;>;
Ljava/util/HashMap$Node<Ljava/lang/String;Lorg/apache/lucene/index/SegmentNorms;>;

***** Found reference cycle *****
HashMap<SegmentInfo, Object> -> (superclass AbstractMap<SegmentInfo, Object> has (HashSet<SegmentInfo> subtype of (field keySet with type Set<SegmentInfo>)))
HashSet<SegmentInfo> -> (field map with type HashMap<SegmentInfo, Object>)
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP128!>;
Ljava/lang/reflect/Constructor<!CAP128!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP63!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
EntrySetView<String, RAMFile> -> (superclass CollectionView<String, RAMFile, Entry<String, RAMFile>> has (field map with type ConcurrentHashMap<String, RAMFile>))
ConcurrentHashMap<String, RAMFile> -> (field entrySet with type EntrySetView<String, RAMFile>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;

***** Found reference cycle *****
Node<String, RAMFile> -> (PerDocBuffer subtype of (field val with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (FileSwitchDirectory subtype of (field directory with type Directory))
FileSwitchDirectory -> (KeySetView<String, RAMFile> subtype of (field primaryExtensions with type Set<String>))
KeySetView<String, RAMFile> -> (superclass CollectionView<String, RAMFile, String> has (field map with type ConcurrentHashMap<String, RAMFile>))
ConcurrentHashMap<String, RAMFile> -> (field table with type Node<String, RAMFile>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$Node<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/store/FileSwitchDirectory;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP136!>;
Ljava/lang/Class<!CAP136!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP62!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP28!>;>;
Ljava/lang/Class$ReflectionData<!CAP28!>;
Ljava/lang/reflect/Constructor<!CAP28!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP28!>;

***** Found reference cycle *****
Node<Long, SearcherTracker> -> (field val with type SearcherTracker)
SearcherTracker -> (field searcher with type IndexSearcher)
IndexSearcher -> (DirectoryReader subtype of (field reader with type IndexReader))
DirectoryReader -> (field subReaders with type SegmentReader)
SegmentReader -> (field core with type SegmentCoreReaders)
SegmentCoreReaders -> (MMapIndexInput subtype of (field freqStream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (SearcherLifetimeManager subtype of (field parent with type Closeable))
SearcherLifetimeManager -> (field searchers with type ConcurrentHashMap<Long, SearcherTracker>)
ConcurrentHashMap<Long, SearcherTracker> -> (field table with type Node<Long, SearcherTracker>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$Node<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;
Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;
Lorg/apache/lucene/search/IndexSearcher;
Lorg/apache/lucene/index/DirectoryReader;
Lorg/apache/lucene/index/SegmentReader;
Lorg/apache/lucene/index/SegmentCoreReaders;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/search/SearcherLifetimeManager;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP39!>;
Ljava/lang/Class<!CAP39!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP132!>;>;
Ljava/lang/Class$ReflectionData<!CAP132!>;
Ljava/lang/reflect/Constructor<!CAP132!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP132!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP100!>;
Ljava/lang/Class<!CAP100!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP110!>;
Ljava/lang/reflect/Constructor<!CAP110!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP110!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP110!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends AttributeImpl>> -> (superclass Reference<ReflectionData<? extends AttributeImpl>> has (field referent with type ReflectionData<? extends AttributeImpl>))
ReflectionData<? extends AttributeImpl> -> (field declaredConstructors with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<? extends AttributeImpl> subtype of (field returnType with type Type))
Class<? extends AttributeImpl> -> (field reflectionData with type SoftReference<ReflectionData<? extends AttributeImpl>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/util/AttributeImpl;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP40!>;
Ljava/lang/reflect/Constructor<!CAP40!>;
Ljava/lang/Class<!CAP40!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP40!>;>;

***** Found reference cycle *****
AbstractInterruptibleChannel -> (MergeThread subtype of (field interrupted with type Thread))
MergeThread -> (field tWriter with type IndexWriter)
IndexWriter -> (NativeFSLock subtype of (field writeLock with type Lock))
NativeFSLock -> (field lock with type FileLock)
FileLock -> (AbstractInterruptibleChannel subtype of (field channel with type Channel))
----- Full Types -----
Ljava/nio/channels/spi/AbstractInterruptibleChannel;
Lorg/apache/lucene/index/ConcurrentMergeScheduler.MergeThread;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/store/NativeFSLock;
Ljava/nio/channels/FileLock;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP84!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP84!>;

***** Found reference cycle *****
Node<OneMerge, Object> -> (field key with type OneMerge)
OneMerge -> (field info with type SegmentInfo)
SegmentInfo -> (AbstractMap<String, String> subtype of (field diagnostics with type Map<String, String>))
AbstractMap<String, String> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (HashSet<OneMerge> subtype of (field runningMerges with type Set<OneMerge>))
HashSet<OneMerge> -> (field map with type HashMap<OneMerge, Object>)
HashMap<OneMerge, Object> -> (field table with type Node<OneMerge, Object>)
----- Full Types -----
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/MergePolicy$OneMerge;Ljava/lang/Object;>;
Lorg/apache/lucene/index/MergePolicy$OneMerge;
Lorg/apache/lucene/index/SegmentInfo;
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Ljava/util/HashSet<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/MergePolicy$OneMerge;Ljava/lang/Object;>;

***** Found reference cycle *****
FSDirectory -> (KeySetView<String, RAMFile> subtype of (field staleFiles with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (FSDirectory subtype of (field directory with type Directory))
----- Full Types -----
Lorg/apache/lucene/store/FSDirectory;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP95!>;
Ljava/lang/reflect/Constructor<!CAP95!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP72!>;
Ljava/lang/reflect/Constructor<!CAP72!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP72!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP72!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP26!>;>;
Ljava/lang/Class$ReflectionData<!CAP26!>;
Ljava/lang/reflect/Constructor<!CAP26!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP26!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP134!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP37!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
TermVectorsTermsWriterPerThread -> (field termsHashPerThread with type TermsHashPerThread)
TermsHashPerThread -> (TermVectorsTermsWriterPerThread subtype of (field consumer with type TermsHashConsumerPerThread))
----- Full Types -----
Lorg/apache/lucene/index/TermVectorsTermsWriterPerThread;
Lorg/apache/lucene/index/TermsHashPerThread;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP21!>;>;
Ljava/lang/Class$ReflectionData<!CAP21!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP21!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP84!>;
Ljava/lang/reflect/Constructor<!CAP84!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP84!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP84!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP51!>;
Ljava/lang/reflect/Constructor<!CAP51!>;

***** Found reference cycle *****
ValuesView<Long, SearcherTracker> -> (superclass CollectionView<Long, SearcherTracker, SearcherTracker> has (field map with type ConcurrentHashMap<Long, SearcherTracker>))
ConcurrentHashMap<Long, SearcherTracker> -> (field values with type ValuesView<Long, SearcherTracker>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP17!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP17!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP17!>;>;

***** Found reference cycle *****
Node<String, Package> -> (field value with type Package)
Package -> (field packageInfo with type Class<?>)
Class<?> -> (field classLoader with type ClassLoader)
ClassLoader -> (field packages with type HashMap<String, Package>)
HashMap<String, Package> -> (field table with type Node<String, Package>)
----- Full Types -----
Ljava/util/HashMap$Node<Ljava/lang/String;Ljava/lang/Package;>;
Ljava/lang/Package;
Ljava/lang/Class<*>;
Ljava/lang/ClassLoader;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Package;>;

***** Found reference cycle *****
FieldsWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (RAMInputStream subtype of (field stream with type IndexInput))
RAMInputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (field fieldsWriter with type StoredFieldsWriter)
StoredFieldsWriter -> (field fieldsWriter with type FieldsWriter)
----- Full Types -----
Lorg/apache/lucene/index/FieldsWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/RAMInputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;
Lorg/apache/lucene/index/StoredFieldsWriter;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP118!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP73!>;
Ljava/lang/reflect/Constructor<!CAP73!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP11!>;>;
Ljava/lang/Class$ReflectionData<!CAP11!>;
Ljava/lang/reflect/Constructor<!CAP11!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP11!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP36!>;>;
Ljava/lang/Class$ReflectionData<!CAP36!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP36!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP39!>;
Ljava/lang/reflect/Constructor<!CAP39!>;
Ljava/lang/Class<!CAP39!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP39!>;>;

***** Found reference cycle *****
RandomAccessFile -> (field fd with type FileDescriptor)
FileDescriptor -> (RandomAccessFile subtype of (field parent with type Closeable))
----- Full Types -----
Ljava/io/RandomAccessFile;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
ReentrantLock -> (field sync with type Sync)
Sync -> (superclass AbstractQueuedSynchronizer has (superclass AbstractOwnableSynchronizer has (NRTManagerReopenThread subtype of (field exclusiveOwnerThread with type Thread))))
NRTManagerReopenThread -> (field manager with type NRTManager)
NRTManager -> (field reopenLock with type ReentrantLock)
----- Full Types -----
Ljava/util/concurrent/locks/ReentrantLock;
Ljava/util/concurrent/locks/ReentrantLock$Sync;
Lorg/apache/lucene/search/NRTManagerReopenThread;
Lorg/apache/lucene/search/NRTManager;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP65!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP65!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP47!>;
Ljava/lang/reflect/Constructor<!CAP47!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP47!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP47!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP82!>;
Ljava/lang/reflect/Constructor<!CAP82!>;
Ljava/lang/Class<!CAP82!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP82!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP99!>;
Ljava/lang/reflect/Constructor<!CAP99!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP4!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
HashSet<Term> -> (field map with type HashMap<Term, Object>)
HashMap<Term, Object> -> (superclass AbstractMap<Term, Object> has (HashSet<Term> subtype of (field keySet with type Set<Term>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/index/Term;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Object;>;

***** Found reference cycle *****
TermInfosReader -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TermInfosReader subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/TermInfosReader;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
ServerSocket -> (field impl with type SocketImpl)
SocketImpl -> (field serverSocket with type ServerSocket)
----- Full Types -----
Ljava/net/ServerSocket;
Ljava/net/SocketImpl;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP127!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ProtectionDomain -> (field classloader with type ClassLoader)
ClassLoader -> (field defaultDomain with type ProtectionDomain)
----- Full Types -----
Ljava/security/ProtectionDomain;
Ljava/lang/ClassLoader;

***** Found reference cycle *****
HashMap<String, FileEntry> -> (superclass AbstractMap<String, FileEntry> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (field entries with type HashMap<String, FileEntry>)
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/CompoundFileReader$FileEntry;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;

***** Found reference cycle *****
CommitPoint -> (CollectionView<String, RAMFile, String> subtype of (field files with type Collection<String>))
CollectionView<String, RAMFile, String> -> (field map with type ConcurrentHashMap<String, RAMFile>)
ConcurrentHashMap<String, RAMFile> -> (field keySet with type KeySetView<String, RAMFile>)
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (CommitPoint subtype of (field commit with type IndexCommit))
----- Full Types -----
Lorg/apache/lucene/index/IndexFileDeleter$CommitPoint;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP111!>;>;
Ljava/lang/Class$ReflectionData<!CAP111!>;
Ljava/lang/reflect/Constructor<!CAP111!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP111!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP139!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
HashMap<Term, Integer> -> (superclass AbstractMap<Term, Integer> has (HashSet<Term> subtype of (field keySet with type Set<Term>)))
HashSet<Term> -> (field map with type HashMap<Term, Object>)
HashMap<Term, Object> -> (superclass AbstractMap<Term, Object> has (ValuesView<String, Object> subtype of (field values with type Collection<Object>)))
ValuesView<String, Object> -> (superclass CollectionView<String, Object, Object> has (field map with type ConcurrentHashMap<String, Object>))
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field pendingDeletes with type BufferedDeletes)
BufferedDeletes -> (HashMap<Term, Integer> subtype of (field terms with type Map<Term, Integer>))
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/Term;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/BufferedDeletes;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP75!>;>;
Ljava/lang/Class$ReflectionData<!CAP75!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP75!>;

***** Found reference cycle *****
Class<Void> -> (field cachedConstructor with type Constructor<Void>)
Constructor<Void> -> (field clazz with type Class<Void>)
----- Full Types -----
Ljava/lang/Class<Ljava/lang/Void;>;
Ljava/lang/reflect/Constructor<Ljava/lang/Void;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP13!>;
Ljava/lang/reflect/Constructor<!CAP13!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP13!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP13!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP118!>;>;
Ljava/lang/Class$ReflectionData<!CAP118!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP118!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP131!>;
Ljava/lang/reflect/Constructor<!CAP131!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP139!>;
Ljava/lang/reflect/Constructor<!CAP139!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP139!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP139!>;>;

***** Found reference cycle *****
AbstractMap<Term, Integer> -> (HashSet<Term> subtype of (field keySet with type Set<Term>))
HashSet<Term> -> (field map with type HashMap<Term, Object>)
HashMap<Term, Object> -> (superclass AbstractMap<Term, Object> has (ValuesView<String, Object> subtype of (field values with type Collection<Object>)))
ValuesView<String, Object> -> (superclass CollectionView<String, Object, Object> has (field map with type ConcurrentHashMap<String, Object>))
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field pendingDeletes with type BufferedDeletes)
BufferedDeletes -> (AbstractMap<Term, Integer> subtype of (field terms with type Map<Term, Integer>))
----- Full Types -----
Ljava/util/AbstractMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/Term;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/BufferedDeletes;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP51!>;>;
Ljava/lang/Class$ReflectionData<!CAP51!>;
Ljava/lang/reflect/Constructor<!CAP51!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP51!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP35!>;
Ljava/lang/reflect/Constructor<!CAP35!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP35!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP35!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP105!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP105!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP105!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP92!>;>;
Ljava/lang/Class$ReflectionData<!CAP92!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP92!>;

***** Found reference cycle *****
AbstractMap<String, Resolution> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<QueryParser> subtype of (field parameterTypeCache with type Type))
Class<QueryParser> -> (? extends QueryParser subtype of (field enumConstants with type QueryParser))
? extends QueryParser -> (superclass QueryParser has (AbstractMap<String, Resolution> subtype of (field fieldToDateResolution with type Map<String, Resolution>)))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;
+Lorg/apache/lucene/queryParser/QueryParser;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP79!>;>;
Ljava/lang/Class$ReflectionData<!CAP79!>;
Ljava/lang/reflect/Constructor<!CAP79!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP79!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP22!>;>;
Ljava/lang/Class$ReflectionData<!CAP22!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP22!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP25!>;>;
Ljava/lang/Class$ReflectionData<!CAP25!>;
Ljava/lang/reflect/Constructor<!CAP25!>;
Ljava/lang/Class<!CAP25!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP87!>;
Ljava/lang/Class<!CAP87!>;

***** Found reference cycle *****
CharArrayMap<Object> -> (field keySet with type CharArraySet)
CharArraySet -> (field map with type CharArrayMap<Object>)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<Ljava/lang/Object;>;
Lorg/apache/lucene/analysis/CharArraySet;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP105!>;
Ljava/lang/Class<!CAP105!>;

***** Found reference cycle *****
FieldsReader -> (MMapIndexInput subtype of (field cloneableFieldsStream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (FieldsReader subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/FieldsReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP31!>;
Ljava/lang/Class<!CAP31!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP75!>;
Ljava/lang/Class<!CAP75!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP43!>;
Ljava/lang/reflect/Constructor<!CAP43!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP133!>;
Ljava/lang/reflect/Constructor<!CAP133!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP115!>;>;
Ljava/lang/Class$ReflectionData<!CAP115!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP115!>;

***** Found reference cycle *****
SoftReference<ReflectionData<Float>> -> (superclass Reference<ReflectionData<Float>> has (field referent with type ReflectionData<Float>))
ReflectionData<Float> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Float> subtype of (field parameterTypeCache with type Type))
Class<Float> -> (field reflectionData with type SoftReference<ReflectionData<Float>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Float;>;>;
Ljava/lang/Class$ReflectionData<Ljava/lang/Float;>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Float;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP71!>;>;
Ljava/lang/Class$ReflectionData<!CAP71!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP71!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP137!>;
Ljava/lang/Class<!CAP137!>;

***** Found reference cycle *****
<captured wildcard> -> (superclass QueryParser has (field token_source with type QueryParserTokenManager))
QueryParserTokenManager -> (FastCharStream subtype of (field input_stream with type CharStream))
FastCharStream -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (MappedByteBuffer subtype of (field bb with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<QueryParser> subtype of (field returnType with type Type))
Class<QueryParser> -> (<captured wildcard> subtype of (field enumConstants with type QueryParser))
----- Full Types -----
!CAP29!
Lorg/apache/lucene/queryParser/QueryParserTokenManager;
Lorg/apache/lucene/queryParser/FastCharStream;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;

***** Found reference cycle *****
ReflectionData<Boolean> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Boolean> subtype of (field parameterTypeCache with type Type))
Class<Boolean> -> (field reflectionData with type SoftReference<ReflectionData<Boolean>>)
SoftReference<ReflectionData<Boolean>> -> (superclass Reference<ReflectionData<Boolean>> has (field referent with type ReflectionData<Boolean>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Ljava/lang/Boolean;>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Boolean;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Boolean;>;>;

***** Found reference cycle *****
Constructor<? extends CharTokenizer> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<? extends CharTokenizer> subtype of (field returnType with type Type))
Class<? extends CharTokenizer> -> (field cachedConstructor with type Constructor<? extends CharTokenizer>)
----- Full Types -----
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/analysis/CharTokenizer;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<+Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP102!>;>;
Ljava/lang/Class$ReflectionData<!CAP102!>;
Ljava/lang/reflect/Constructor<!CAP102!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP102!>;

***** Found reference cycle *****
ReflectionData<? extends Annotation> -> (field declaredConstructors with type Constructor<? extends Annotation>)
Constructor<? extends Annotation> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<? extends Annotation> subtype of (field paramTypes with type Type))
Class<? extends Annotation> -> (field reflectionData with type SoftReference<ReflectionData<? extends Annotation>>)
SoftReference<ReflectionData<? extends Annotation>> -> (superclass Reference<ReflectionData<? extends Annotation>> has (field referent with type ReflectionData<? extends Annotation>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<+Ljava/lang/annotation/Annotation;>;
Ljava/lang/reflect/Constructor<+Ljava/lang/annotation/Annotation;>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Ljava/lang/annotation/Annotation;>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP38!>;>;
Ljava/lang/Class$ReflectionData<!CAP38!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP38!>;

***** Found reference cycle *****
InvertedDocConsumer -> (field fieldInfos with type FieldInfos)
FieldInfos -> (field byName with type HashMap<String, FieldInfo>)
HashMap<String, FieldInfo> -> (superclass AbstractMap<String, FieldInfo> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (DocInverter subtype of (field consumer with type DocFieldConsumer))
DocInverter -> (field consumer with type InvertedDocConsumer)
----- Full Types -----
Lorg/apache/lucene/index/InvertedDocConsumer;
Lorg/apache/lucene/index/FieldInfos;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/FieldInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;
Lorg/apache/lucene/index/DocInverter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP60!>;
Ljava/lang/reflect/Constructor<!CAP60!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP60!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP60!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP130!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP130!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP130!>;>;

***** Found reference cycle *****
Entry<Class<? extends Attribute>, AttributeImpl> -> (superclass Node<Class<? extends Attribute>, AttributeImpl> has (field key with type Class<? extends Attribute>))
Class<? extends Attribute> -> (field cachedConstructor with type Constructor<? extends Attribute>)
Constructor<? extends Attribute> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass Tokenizer has (superclass AttributeSource has (HashMap<Class<? extends Attribute>, AttributeImpl> subtype of (field attributes with type Map<Class<? extends Attribute>, AttributeImpl>))))
HashMap<Class<? extends Attribute>, AttributeImpl> -> (Entry<Class<? extends Attribute>, AttributeImpl> subtype of (field table with type Node<Class<? extends Attribute>, AttributeImpl>))
----- Full Types -----
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP2!>;
!CAP2!
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;

***** Found reference cycle *****
Constructor<Integer> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<Integer> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<Ljava/lang/Integer;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
TermVectorsReader -> (MMapIndexInput subtype of (field tvx with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TermVectorsReader subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/TermVectorsReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
HashMap<String, String> -> (superclass AbstractMap<String, String> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (ReaderCommit subtype of (field commit with type IndexCommit))
ReaderCommit -> (HashMap<String, String> subtype of (field userData with type Map<String, String>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;
Lorg/apache/lucene/index/DirectoryReader$ReaderCommit;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP3!>;>;
Ljava/lang/Class$ReflectionData<!CAP3!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP3!>;

***** Found reference cycle *****
KeySetView<Thread, OneMerge> -> (superclass CollectionView<Thread, OneMerge, Thread> has (field map with type ConcurrentHashMap<Thread, OneMerge>))
ConcurrentHashMap<Thread, OneMerge> -> (field keySet with type KeySetView<Thread, OneMerge>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;

***** Found reference cycle *****
MergePolicy -> (field writer with type SetOnce<IndexWriter>)
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field mergePolicy with type MergePolicy)
----- Full Types -----
Lorg/apache/lucene/index/MergePolicy;
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP103!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP37!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP37!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP37!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP5!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP5!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP5!>;>;

***** Found reference cycle *****
Constructor<Character> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<Character> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<Ljava/lang/Character;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<? extends QueryParser> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<? extends QueryParser> subtype of (field returnType with type Type))
Class<? extends QueryParser> -> (field reflectionData with type SoftReference<ReflectionData<? extends QueryParser>>)
SoftReference<ReflectionData<? extends QueryParser>> -> (superclass Reference<ReflectionData<? extends QueryParser>> has (field referent with type ReflectionData<? extends QueryParser>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<+Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/queryParser/QueryParser;>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP135!>;>;
Ljava/lang/Class$ReflectionData<!CAP135!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP135!>;

***** Found reference cycle *****
LazyField -> (outer class FieldsReader)
FieldsReader -> (ByteSliceReader subtype of (field cloneableFieldsStream with type IndexInput))
ByteSliceReader -> (field pool with type ByteBlockPool)
ByteBlockPool -> (ByteBlockAllocator subtype of (field allocator with type Allocator))
ByteBlockAllocator -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (LazyField subtype of (field fields with type Fieldable))
----- Full Types -----
Lorg/apache/lucene/index/FieldsReader.LazyField;
Lorg/apache/lucene/index/FieldsReader;
Lorg/apache/lucene/index/ByteSliceReader;
Lorg/apache/lucene/index/ByteBlockPool;
Lorg/apache/lucene/index/DocumentsWriter.ByteBlockAllocator;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP58!>;>;
Ljava/lang/Class$ReflectionData<!CAP58!>;
Ljava/lang/reflect/Constructor<!CAP58!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP58!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP63!>;
Ljava/lang/Class<!CAP63!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP115!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
CollectionView<String, RAMFile, RAMFile> -> (field map with type ConcurrentHashMap<String, RAMFile>)
ConcurrentHashMap<String, RAMFile> -> (superclass AbstractMap<String, RAMFile> has (CollectionView<String, RAMFile, RAMFile> subtype of (field values with type Collection<RAMFile>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;

***** Found reference cycle *****
SegmentMergeQueue -> (superclass PriorityQueue<SegmentMergeInfo> has (field heap with type SegmentMergeInfo))
SegmentMergeInfo -> (MultiTermPositions subtype of (field postings with type TermPositions))
MultiTermPositions -> (superclass MultiTermDocs has (field tenum with type MultiTermEnum))
MultiTermEnum -> (field queue with type SegmentMergeQueue)
----- Full Types -----
Lorg/apache/lucene/index/SegmentMergeQueue;
Lorg/apache/lucene/index/SegmentMergeInfo;
Lorg/apache/lucene/index/DirectoryReader$MultiTermPositions;
Lorg/apache/lucene/index/DirectoryReader$MultiTermEnum;

***** Found reference cycle *****
anonymous:382 -> (superclass CharArraySet has (field map with type CharArrayMap<Object>))
CharArrayMap<Object> -> (anonymous:382 subtype of (field keySet with type CharArraySet))
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<TV;>.1;
Lorg/apache/lucene/analysis/CharArrayMap<Ljava/lang/Object;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP140!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP140!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP140!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP129!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP129!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP129!>;>;

***** Found reference cycle *****
ClassValueMap -> (field type with type Class<?>)
Class<?> -> (field classValueMap with type ClassValueMap)
----- Full Types -----
Ljava/lang/ClassValue$ClassValueMap;
Ljava/lang/Class<*>;

***** Found reference cycle *****
SoftReference<ReflectionData<Byte>> -> (superclass Reference<ReflectionData<Byte>> has (field referent with type ReflectionData<Byte>))
ReflectionData<Byte> -> (field declaredConstructors with type Constructor<Byte>)
Constructor<Byte> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<Byte> subtype of (field returnType with type Type))
Class<Byte> -> (field reflectionData with type SoftReference<ReflectionData<Byte>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Byte;>;>;
Ljava/lang/Class$ReflectionData<Ljava/lang/Byte;>;
Ljava/lang/reflect/Constructor<Ljava/lang/Byte;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Ljava/lang/Byte;>;

***** Found reference cycle *****
NormsWriter -> (field fieldInfos with type FieldInfos)
FieldInfos -> (field byName with type HashMap<String, FieldInfo>)
HashMap<String, FieldInfo> -> (superclass AbstractMap<String, FieldInfo> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (DocInverter subtype of (field consumer with type DocFieldConsumer))
DocInverter -> (NormsWriter subtype of (field endConsumer with type InvertedDocEndConsumer))
----- Full Types -----
Lorg/apache/lucene/index/NormsWriter;
Lorg/apache/lucene/index/FieldInfos;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/FieldInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;
Lorg/apache/lucene/index/DocInverter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP97!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
AbstractMap<String, byte[]> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (SearcherTracker subtype of (field parent with type Closeable))
SearcherTracker -> (field searcher with type IndexSearcher)
IndexSearcher -> (DirectoryReader subtype of (field reader with type IndexReader))
DirectoryReader -> (AbstractMap<String, byte[]> subtype of (field normsCache with type Map<String, byte[]>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;[B>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;
Lorg/apache/lucene/search/IndexSearcher;
Lorg/apache/lucene/index/DirectoryReader;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP41!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP121!>;
Ljava/lang/reflect/Constructor<!CAP121!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP138!>;>;
Ljava/lang/Class$ReflectionData<!CAP138!>;
Ljava/lang/reflect/Constructor<!CAP138!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP138!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP33!>;
Ljava/lang/reflect/Constructor<!CAP33!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP67!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP67!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP67!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP137!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP137!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP137!>;>;

***** Found reference cycle *****
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (<captured wildcard> subtype of (field mergePolicy with type MergePolicy))
----- Full Types -----
!CAP25!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
EntrySetView<String, Object> -> (superclass CollectionView<String, Object, Entry<String, Object>> has (field map with type ConcurrentHashMap<String, Object>))
ConcurrentHashMap<String, Object> -> (field entrySet with type EntrySetView<String, Object>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP7!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
FormatPostingsPositionsWriter -> (RAMOutputStream subtype of (field out with type IndexOutput))
RAMOutputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (FormatPostingsPositionsWriter subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/FormatPostingsPositionsWriter;
Lorg/apache/lucene/store/RAMOutputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
HashMap<String, Void> -> (superclass AbstractMap<String, Void> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Void> subtype of (field parameterTypeCache with type Type))
Class<Void> -> (HashMap<String, Void> subtype of (field enumConstantDirectory with type Map<String, Void>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Void;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Void;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP33!>;
Ljava/lang/reflect/Constructor<!CAP33!>;
Ljava/lang/Class<!CAP33!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP33!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP45!>;>;
Ljava/lang/Class$ReflectionData<!CAP45!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP45!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP130!>;
Ljava/lang/Class<!CAP130!>;

***** Found reference cycle *****
<captured wildcard> -> (superclass FSDirectory has (KeySetView<String, RAMFile> subtype of (field staleFiles with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
----- Full Types -----
!CAP107!
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP107!>;

***** Found reference cycle *****
HashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field table with type Node<Class<? extends AttributeImpl>, AttributeImpl>)
Node<Class<? extends AttributeImpl>, AttributeImpl> -> (field key with type Class<? extends AttributeImpl>)
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<CharTokenizer> subtype of (field returnType with type Type))
Class<CharTokenizer> -> (<captured wildcard> subtype of (field enumConstants with type CharTokenizer))
<captured wildcard> -> (superclass Tokenizer has (superclass AttributeSource has (HashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>))))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;
!CAP2!

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP78!>;>;
Ljava/lang/Class$ReflectionData<!CAP78!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP78!>;

***** Found reference cycle *****
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
----- Full Types -----
!CAP24!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP24!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP103!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP103!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP103!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP123!>;
Ljava/lang/reflect/Constructor<!CAP123!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP107!>;
Ljava/lang/Class<!CAP107!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP91!>;>;
Ljava/lang/Class$ReflectionData<!CAP91!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP91!>;

***** Found reference cycle *****
TermInfosWriter -> (RAMOutputStream subtype of (field output with type IndexOutput))
RAMOutputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TermInfosWriter subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/TermInfosWriter;
Lorg/apache/lucene/store/RAMOutputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP67!>;
Ljava/lang/Class<!CAP67!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP80!>;
Ljava/lang/reflect/Constructor<!CAP80!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP80!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP80!>;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP119!>;
Ljava/lang/Class<!CAP119!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP12!>;>;
Ljava/lang/Class$ReflectionData<!CAP12!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP12!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP55!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP55!>;
Ljava/lang/reflect/Constructor<!CAP55!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP55!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP55!>;>;

***** Found reference cycle *****
Constructor<QueryParser> -> (field clazz with type Class<QueryParser>)
Class<QueryParser> -> (field cachedConstructor with type Constructor<QueryParser>)
----- Full Types -----
Ljava/lang/reflect/Constructor<Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP45!>;
Ljava/lang/Class<!CAP45!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP95!>;>;
Ljava/lang/Class$ReflectionData<!CAP95!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP95!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP131!>;>;
Ljava/lang/Class$ReflectionData<!CAP131!>;
Ljava/lang/reflect/Constructor<!CAP131!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP131!>;

***** Found reference cycle *****
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
----- Full Types -----
!CAP26!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP26!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP90!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP90!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP89!>;
Ljava/lang/reflect/Constructor<!CAP89!>;

***** Found reference cycle *****
Executable -> (field parameters with type Parameter)
Parameter -> (field executable with type Executable)
----- Full Types -----
Ljava/lang/reflect/Executable;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP117!>;
Ljava/lang/Class<!CAP117!>;

***** Found reference cycle *****
FlushControl -> (outer class IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field flushControl with type FlushControl)
----- Full Types -----
Lorg/apache/lucene/index/IndexWriter.FlushControl;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;

***** Found reference cycle *****
ValuesView<Thread, OneMerge> -> (superclass CollectionView<Thread, OneMerge, OneMerge> has (field map with type ConcurrentHashMap<Thread, OneMerge>))
ConcurrentHashMap<Thread, OneMerge> -> (field values with type ValuesView<Thread, OneMerge>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP85!>;>;
Ljava/lang/Class$ReflectionData<!CAP85!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP85!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP127!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP127!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP127!>;>;

***** Found reference cycle *****
KeySetView<String, Object> -> (superclass CollectionView<String, Object, String> has (field map with type ConcurrentHashMap<String, Object>))
ConcurrentHashMap<String, Object> -> (field keySet with type KeySetView<String, Object>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP57!>;
Ljava/lang/reflect/Constructor<!CAP57!>;
Ljava/lang/Class<!CAP57!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP57!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP128!>;>;
Ljava/lang/Class$ReflectionData<!CAP128!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP128!>;

***** Found reference cycle *****
AbstractMap<String, Analyzer> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (PerFieldAnalyzerWrapper subtype of (field analyzer with type Analyzer))
PerFieldAnalyzerWrapper -> (AbstractMap<String, Analyzer> subtype of (field analyzerMap with type Map<String, Analyzer>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/analysis/PerFieldAnalyzerWrapper;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP89!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP89!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP89!>;>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP113!>;
Ljava/lang/reflect/Constructor<!CAP113!>;

***** Found reference cycle *****
HashMap<Query, Integer> -> (superclass AbstractMap<Query, Integer> has (HashSet<Query> subtype of (field keySet with type Set<Query>)))
HashSet<Query> -> (field map with type HashMap<Query, Object>)
HashMap<Query, Object> -> (superclass AbstractMap<Query, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field pendingDeletes with type BufferedDeletes)
BufferedDeletes -> (HashMap<Query, Integer> subtype of (field queries with type Map<Query, Integer>))
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/search/Query;Ljava/lang/Integer;>;
Ljava/util/HashSet<Lorg/apache/lucene/search/Query;>;
Ljava/util/HashMap<Lorg/apache/lucene/search/Query;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/BufferedDeletes;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP23!>;
Ljava/lang/reflect/Constructor<!CAP23!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP23!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP23!>;>;

***** Found reference cycle *****
Constructor<CharTokenizer> -> (field clazz with type Class<CharTokenizer>)
Class<CharTokenizer> -> (field cachedConstructor with type Constructor<CharTokenizer>)
----- Full Types -----
Ljava/lang/reflect/Constructor<Lorg/apache/lucene/analysis/CharTokenizer;>;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
DefaultSkipListReader -> (superclass MultiLevelSkipListReader has (MMapIndexInput subtype of (field skipStream with type IndexInput)))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass PostingsAndFreq has (SegmentTermPositions subtype of (field postings with type TermPositions)))
SegmentTermPositions -> (superclass SegmentTermDocs has (field skipListReader with type DefaultSkipListReader))
----- Full Types -----
Lorg/apache/lucene/index/DefaultSkipListReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP41!>;
!CAP41!
Lorg/apache/lucene/index/SegmentTermPositions;

***** Found reference cycle *****
HashMap<String, RefCount> -> (superclass AbstractMap<String, RefCount> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field deleter with type IndexFileDeleter)
IndexFileDeleter -> (HashMap<String, RefCount> subtype of (field refCounts with type Map<String, RefCount>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/IndexFileDeleter$RefCount;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/IndexFileDeleter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP21!>;
Ljava/lang/Class<!CAP21!>;

***** Found reference cycle *****
ThreadGroup -> (NRTManagerReopenThread subtype of (field threads with type Thread))
NRTManagerReopenThread -> (superclass Thread has (field group with type ThreadGroup))
----- Full Types -----
Ljava/lang/ThreadGroup;
Lorg/apache/lucene/search/NRTManagerReopenThread;

***** Found reference cycle *****
AbstractMap<String, SnapshotInfo> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (SnapshotDeletionPolicy subtype of (field delPolicy with type IndexDeletionPolicy))
SnapshotDeletionPolicy -> (AbstractMap<String, SnapshotInfo> subtype of (field idToSnapshot with type Map<String, SnapshotInfo>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/index/SnapshotDeletionPolicy$SnapshotInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;
Lorg/apache/lucene/index/SnapshotDeletionPolicy;

***** Found reference cycle *****
SoftReference<ReflectionData<AttributeImpl>> -> (superclass Reference<ReflectionData<AttributeImpl>> has (field referent with type ReflectionData<AttributeImpl>))
ReflectionData<AttributeImpl> -> (field declaredConstructors with type Constructor<AttributeImpl>)
Constructor<AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<AttributeImpl> subtype of (field parameterTypeCache with type Type))
Class<AttributeImpl> -> (field reflectionData with type SoftReference<ReflectionData<AttributeImpl>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/util/AttributeImpl;>;>;
Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/util/AttributeImpl;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP65!>;>;
Ljava/lang/Class$ReflectionData<!CAP65!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP65!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP129!>;
Ljava/lang/Class<!CAP129!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP140!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Class<Short> -> (field cachedConstructor with type Constructor<Short>)
Constructor<Short> -> (field clazz with type Class<Short>)
----- Full Types -----
Ljava/lang/Class<Ljava/lang/Short;>;
Ljava/lang/reflect/Constructor<Ljava/lang/Short;>;

***** Found reference cycle *****
BufferedDeletesStream -> (field infoStream with type PrintStream)
PrintStream -> (field charOut with type OutputStreamWriter)
OutputStreamWriter -> (field se with type StreamEncoder)
StreamEncoder -> (FileOutputStream subtype of (field out with type OutputStream))
FileOutputStream -> (field channel with type FileChannel)
FileChannel -> (superclass AbstractInterruptibleChannel has (MergeThread subtype of (field interrupted with type Thread)))
MergeThread -> (field tWriter with type IndexWriter)
IndexWriter -> (field bufferedDeletesStream with type BufferedDeletesStream)
----- Full Types -----
Lorg/apache/lucene/index/BufferedDeletesStream;
Ljava/io/PrintStream;
Ljava/io/OutputStreamWriter;
Lsun/nio/cs/StreamEncoder;
Ljava/io/FileOutputStream;
Ljava/nio/channels/FileChannel;
Lorg/apache/lucene/index/ConcurrentMergeScheduler.MergeThread;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP90!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP90!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP90!>;>;

***** Found reference cycle *****
AccessControlContext -> (field context with type ProtectionDomain)
ProtectionDomain -> (field classloader with type ClassLoader)
ClassLoader -> (field packages with type HashMap<String, Package>)
HashMap<String, Package> -> (superclass AbstractMap<String, Package> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (NRTCachingDirectory subtype of (field directory with type Directory))
NRTCachingDirectory -> (field merges with type ConcurrentHashMap<Thread, OneMerge>)
ConcurrentHashMap<Thread, OneMerge> -> (field table with type Node<Thread, OneMerge>)
Node<Thread, OneMerge> -> (MergeThread subtype of (field key with type Thread))
MergeThread -> (superclass Thread has (field inheritedAccessControlContext with type AccessControlContext))
----- Full Types -----
Ljava/security/AccessControlContext;
Ljava/security/ProtectionDomain;
Ljava/lang/ClassLoader;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Package;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/store/NRTCachingDirectory;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap$Node<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Lorg/apache/lucene/index/ConcurrentMergeScheduler.MergeThread;

***** Found reference cycle *****
CollectionView<Thread, OneMerge, OneMerge> -> (field map with type ConcurrentHashMap<Thread, OneMerge>)
ConcurrentHashMap<Thread, OneMerge> -> (superclass AbstractMap<Thread, OneMerge> has (CollectionView<Thread, OneMerge, OneMerge> subtype of (field values with type Collection<OneMerge>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP36!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP123!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP123!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP123!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP32!>;>;
Ljava/lang/Class$ReflectionData<!CAP32!>;
Ljava/lang/reflect/Constructor<!CAP32!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP32!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP99!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP99!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP99!>;>;

***** Found reference cycle *****
AttributeSource -> (HashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>))
HashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field table with type Node<Class<? extends AttributeImpl>, AttributeImpl>)
Node<Class<? extends AttributeImpl>, AttributeImpl> -> (field key with type Class<? extends AttributeImpl>)
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field fieldState with type FieldInvertState)
FieldInvertState -> (field attributeSource with type AttributeSource)
----- Full Types -----
Lorg/apache/lucene/util/AttributeSource;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP17!>;
!CAP17!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/FieldInvertState;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP48!>;>;
Ljava/lang/Class$ReflectionData<!CAP48!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP48!>;

***** Found reference cycle *****
TermVectorsTermsWriterPerField -> (field termsHashPerField with type TermsHashPerField)
TermsHashPerField -> (TermVectorsTermsWriterPerField subtype of (field consumer with type TermsHashConsumerPerField))
----- Full Types -----
Lorg/apache/lucene/index/TermVectorsTermsWriterPerField;
Lorg/apache/lucene/index/TermsHashPerField;

***** Found reference cycle *****
TimerThread -> (superclass Thread has (field group with type ThreadGroup))
ThreadGroup -> (TimerThread subtype of (field threads with type Thread))
----- Full Types -----
Lorg/apache/lucene/search/TimeLimitingCollector$TimerThread;
Ljava/lang/ThreadGroup;

***** Found reference cycle *****
Node -> (NRTManagerReopenThread subtype of (field thread with type Thread))
NRTManagerReopenThread -> (field manager with type NRTManager)
NRTManager -> (CopyOnWriteArrayList<WaitingListener> subtype of (field waitingListeners with type List<WaitingListener>))
CopyOnWriteArrayList<WaitingListener> -> (field lock with type ReentrantLock)
ReentrantLock -> (field sync with type Sync)
Sync -> (superclass AbstractQueuedSynchronizer has (field head with type Node))
----- Full Types -----
Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;
Lorg/apache/lucene/search/NRTManagerReopenThread;
Lorg/apache/lucene/search/NRTManager;
Ljava/util/concurrent/CopyOnWriteArrayList<Lorg/apache/lucene/search/NRTManager$WaitingListener;>;
Ljava/util/concurrent/locks/ReentrantLock;
Ljava/util/concurrent/locks/ReentrantLock$Sync;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP121!>;>;
Ljava/lang/Class$ReflectionData<!CAP121!>;
Ljava/lang/reflect/Constructor<!CAP121!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP121!>;

***** Found reference cycle *****
TermPositionsQueue -> (superclass PriorityQueue<TermPositions> has (MultipleTermPositions subtype of (field heap with type TermPositions)))
MultipleTermPositions -> (field _termPositionsQueue with type TermPositionsQueue)
----- Full Types -----
Lorg/apache/lucene/index/MultipleTermPositions$TermPositionsQueue;
Lorg/apache/lucene/index/MultipleTermPositions;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP73!>;>;
Ljava/lang/Class$ReflectionData<!CAP73!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP73!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP93!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP41!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP41!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP41!>;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP14!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP14!>;

***** Found reference cycle *****
TieredMergePolicy -> (SegmentByteSizeDescending subtype of (field segmentByteSizeDescending with type Comparator<SegmentInfo>))
SegmentByteSizeDescending -> (outer class TieredMergePolicy)
----- Full Types -----
Lorg/apache/lucene/index/TieredMergePolicy;
Lorg/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP24!>;>;
Ljava/lang/Class$ReflectionData<!CAP24!>;
Ljava/lang/reflect/Constructor<!CAP24!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP24!>;

***** Found reference cycle *****
KeySetView<Long, SearcherTracker> -> (superclass CollectionView<Long, SearcherTracker, Long> has (field map with type ConcurrentHashMap<Long, SearcherTracker>))
ConcurrentHashMap<Long, SearcherTracker> -> (field keySet with type KeySetView<Long, SearcherTracker>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Long;Lorg/apache/lucene/search/SearcherLifetimeManager$SearcherTracker;>;

***** Found reference cycle *****
AbstractMap<Thread, T> -> (KeySetView<Thread, OneMerge> subtype of (field keySet with type Set<Thread>))
KeySetView<Thread, OneMerge> -> (field value with type OneMerge)
OneMerge -> (field info with type SegmentInfo)
SegmentInfo -> (CompoundFileReader subtype of (field dir with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (CloseableThreadLocal<T> subtype of (field parent with type Closeable))
CloseableThreadLocal<T> -> (AbstractMap<Thread, T> subtype of (field hardRefs with type Map<Thread, T>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/Thread;T:org/apache/lucene/util/CloseableThreadLocal:T;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Lorg/apache/lucene/index/MergePolicy$OneMerge;
Lorg/apache/lucene/index/SegmentInfo;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/util/CloseableThreadLocal<TT;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP108!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SegmentTermEnum -> (MMapIndexInput subtype of (field input with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TermInfosReader subtype of (field parent with type Closeable))
TermInfosReader -> (field origEnum with type SegmentTermEnum)
----- Full Types -----
Lorg/apache/lucene/index/SegmentTermEnum;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/index/TermInfosReader;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP113!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP113!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP113!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP43!>;
Ljava/lang/reflect/Constructor<!CAP43!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP43!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP43!>;>;

***** Found reference cycle *****
Socket -> (field impl with type SocketImpl)
SocketImpl -> (field socket with type Socket)
----- Full Types -----
Ljava/net/Socket;
Ljava/net/SocketImpl;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP97!>;>;
Ljava/lang/Class$ReflectionData<!CAP97!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP97!>;

***** Found reference cycle *****
HashMap<String, Resolution> -> (superclass AbstractMap<String, Resolution> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<QueryParser> subtype of (field parameterTypeCache with type Type))
Class<QueryParser> -> (? extends QueryParser subtype of (field enumConstants with type QueryParser))
? extends QueryParser -> (superclass QueryParser has (HashMap<String, Resolution> subtype of (field fieldToDateResolution with type Map<String, Resolution>)))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;
+Lorg/apache/lucene/queryParser/QueryParser;

***** Found reference cycle *****
LogMergePolicy -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (LogMergePolicy subtype of (field mergePolicy with type MergePolicy))
----- Full Types -----
Lorg/apache/lucene/index/LogMergePolicy;
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP5!>;
Ljava/lang/Class<!CAP5!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP31!>;
Ljava/lang/reflect/Constructor<!CAP31!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP31!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP31!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP81!>;>;
Ljava/lang/Class$ReflectionData<!CAP81!>;
Ljava/lang/reflect/Constructor<!CAP81!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP81!>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP87!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP87!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP87!>;>;

***** Found reference cycle *****
AbstractMap<Query, Integer> -> (HashSet<Query> subtype of (field keySet with type Set<Query>))
HashSet<Query> -> (field map with type HashMap<Query, Object>)
HashMap<Query, Object> -> (superclass AbstractMap<Query, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field pendingDeletes with type BufferedDeletes)
BufferedDeletes -> (AbstractMap<Query, Integer> subtype of (field queries with type Map<Query, Integer>))
----- Full Types -----
Ljava/util/AbstractMap<Lorg/apache/lucene/search/Query;Ljava/lang/Integer;>;
Ljava/util/HashSet<Lorg/apache/lucene/search/Query;>;
Ljava/util/HashMap<Lorg/apache/lucene/search/Query;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/BufferedDeletes;

***** Found reference cycle *****
AbstractMap<SegmentInfo, Boolean> -> (HashSet<SegmentInfo> subtype of (field keySet with type Set<SegmentInfo>))
HashSet<SegmentInfo> -> (field map with type HashMap<SegmentInfo, Object>)
HashMap<SegmentInfo, Object> -> (superclass AbstractMap<SegmentInfo, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (AbstractMap<SegmentInfo, Boolean> subtype of (field segmentsToMerge with type Map<SegmentInfo, Boolean>))
----- Full Types -----
Ljava/util/AbstractMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Boolean;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
UpgradeIndexMergePolicy -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (UpgradeIndexMergePolicy subtype of (field mergePolicy with type MergePolicy))
----- Full Types -----
Lorg/apache/lucene/index/UpgradeIndexMergePolicy;
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
CharTokenizer -> (superclass Tokenizer has (superclass AttributeSource has (LinkedHashMap<Class<? extends Attribute>, AttributeImpl> subtype of (field attributes with type Map<Class<? extends Attribute>, AttributeImpl>))))
LinkedHashMap<Class<? extends Attribute>, AttributeImpl> -> (field head with type Entry<Class<? extends Attribute>, AttributeImpl>)
Entry<Class<? extends Attribute>, AttributeImpl> -> (superclass Node<Class<? extends Attribute>, AttributeImpl> has (field key with type Class<? extends Attribute>))
Class<? extends Attribute> -> (field cachedConstructor with type Constructor<? extends Attribute>)
Constructor<? extends Attribute> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<CharTokenizer> subtype of (field returnType with type Type))
Class<CharTokenizer> -> (field enumConstants with type CharTokenizer)
----- Full Types -----
Lorg/apache/lucene/analysis/CharTokenizer;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/Attribute;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
AbstractMap<String, Object> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field annotationType with type AnnotationType)
AnnotationType -> (AbstractMap<String, Object> subtype of (field memberDefaults with type Map<String, Object>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/annotation/AnnotationType;

***** Found reference cycle *****
FreqProxTermsWriterPerThread -> (field termsHashPerThread with type TermsHashPerThread)
TermsHashPerThread -> (FreqProxTermsWriterPerThread subtype of (field consumer with type TermsHashConsumerPerThread))
----- Full Types -----
Lorg/apache/lucene/index/FreqProxTermsWriterPerThread;
Lorg/apache/lucene/index/TermsHashPerThread;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP66!>;>;
Ljava/lang/Class$ReflectionData<!CAP66!>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP66!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
----- Full Types -----
Ljava/lang/Class<!CAP6!>;
Lsun/reflect/generics/repository/ClassRepository;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends Attribute>> -> (superclass Reference<ReflectionData<? extends Attribute>> has (field referent with type ReflectionData<? extends Attribute>))
ReflectionData<? extends Attribute> -> (field declaredConstructors with type Constructor<? extends Attribute>)
Constructor<? extends Attribute> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<? extends Attribute> subtype of (field paramTypes with type Type))
Class<? extends Attribute> -> (field reflectionData with type SoftReference<ReflectionData<? extends Attribute>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/util/Attribute;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/Attribute;>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;

***** Found reference cycle *****
CollectionView<String, Object, String> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (ReaderCommit subtype of (field commit with type IndexCommit))
ReaderCommit -> (CollectionView<String, Object, String> subtype of (field files with type Collection<String>))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;
Lorg/apache/lucene/index/DirectoryReader$ReaderCommit;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP1!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP125!>;
Ljava/lang/Class<!CAP125!>;

***** Found reference cycle *****
ReflectionData<Long> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Long> subtype of (field parameterTypeCache with type Type))
Class<Long> -> (field reflectionData with type SoftReference<ReflectionData<Long>>)
SoftReference<ReflectionData<Long>> -> (superclass Reference<ReflectionData<Long>> has (field referent with type ReflectionData<Long>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Ljava/lang/Long;>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Long;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Long;>;>;

***** Found reference cycle *****
Constructor<Long> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<Long> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<Ljava/lang/Long;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
OutputStreamDataOutput -> (FileOutputStream subtype of (field os with type OutputStream))
FileOutputStream -> (field fd with type FileDescriptor)
FileDescriptor -> (OutputStreamDataOutput subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/store/OutputStreamDataOutput;
Ljava/io/FileOutputStream;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP133!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP133!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP133!>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP63!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP63!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP63!>;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP61!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP4!>;>;
Ljava/lang/Class$ReflectionData<!CAP4!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP4!>;

***** Found reference cycle *****
QueryParser -> (field token_source with type QueryParserTokenManager)
QueryParserTokenManager -> (FastCharStream subtype of (field input_stream with type CharStream))
FastCharStream -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (MappedByteBuffer subtype of (field bb with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<QueryParser> subtype of (field returnType with type Type))
Class<QueryParser> -> (field enumConstants with type QueryParser)
----- Full Types -----
Lorg/apache/lucene/queryParser/QueryParser;
Lorg/apache/lucene/queryParser/QueryParserTokenManager;
Lorg/apache/lucene/queryParser/FastCharStream;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;

***** Found reference cycle *****
RAMFile -> (field directory with type RAMDirectory)
RAMDirectory -> (AbstractMap<String, RAMFile> subtype of (field fileMap with type Map<String, RAMFile>))
AbstractMap<String, RAMFile> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (field value with type RAMFile)
----- Full Types -----
Lorg/apache/lucene/store/RAMFile;
Lorg/apache/lucene/store/RAMDirectory;
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP3!>;
Ljava/lang/Class<!CAP3!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP114!>;>;
Ljava/lang/Class$ReflectionData<!CAP114!>;
Ljava/lang/reflect/Constructor<!CAP114!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP114!>;

***** Found reference cycle *****
DefaultSkipListWriter -> (RAMOutputStream subtype of (field freqOutput with type IndexOutput))
RAMOutputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (FormatPostingsDocsWriter subtype of (field parent with type Closeable))
FormatPostingsDocsWriter -> (field skipListWriter with type DefaultSkipListWriter)
----- Full Types -----
Lorg/apache/lucene/index/DefaultSkipListWriter;
Lorg/apache/lucene/store/RAMOutputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/index/FormatPostingsDocsWriter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP6!>;>;
Ljava/lang/Class$ReflectionData<!CAP6!>;
Ljava/lang/reflect/Constructor<!CAP6!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP6!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP56!>;>;
Ljava/lang/Class$ReflectionData<!CAP56!>;
Ljava/lang/reflect/Constructor<!CAP56!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP56!>;

***** Found reference cycle *****
AbstractMap<SegmentInfo, SegmentReader> -> (HashSet<SegmentInfo> subtype of (field keySet with type Set<SegmentInfo>))
HashSet<SegmentInfo> -> (field map with type HashMap<SegmentInfo, Object>)
HashMap<SegmentInfo, Object> -> (superclass AbstractMap<SegmentInfo, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field readerPool with type ReaderPool)
ReaderPool -> (AbstractMap<SegmentInfo, SegmentReader> subtype of (field readerMap with type Map<SegmentInfo, SegmentReader>))
----- Full Types -----
Ljava/util/AbstractMap<Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/SegmentReader;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/IndexWriter.ReaderPool;

***** Found reference cycle *****
AbstractMap<String, IndexReader> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<IndexReader> subtype of (field parameterTypeCache with type Type))
Class<IndexReader> -> (AbstractMap<String, IndexReader> subtype of (field enumConstantDirectory with type Map<String, IndexReader>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/index/IndexReader;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP135!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP135!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP104!>;>;
Ljava/lang/Class$ReflectionData<!CAP104!>;
Ljava/lang/reflect/Constructor<!CAP104!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP104!>;

***** Found reference cycle *****
ParallelTermPositions -> (outer class ParallelReader)
ParallelReader -> (HashMap<IndexReader, Collection<String>> subtype of (field readerToFields with type Map<IndexReader, Collection<String>>))
HashMap<IndexReader, Collection<String>> -> (field table with type Node<IndexReader, Collection<String>>)
Node<IndexReader, Collection<String>> -> (SegmentReader subtype of (field key with type IndexReader))
SegmentReader -> (field core with type SegmentCoreReaders)
SegmentCoreReaders -> (MMapIndexInput subtype of (field freqStream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass PostingsAndFreq has (ParallelTermPositions subtype of (field postings with type TermPositions)))
----- Full Types -----
Lorg/apache/lucene/index/ParallelReader.ParallelTermPositions;
Lorg/apache/lucene/index/ParallelReader;
Ljava/util/HashMap<Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection<Ljava/lang/String;>;>;
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection<Ljava/lang/String;>;>;
Lorg/apache/lucene/index/SegmentReader;
Lorg/apache/lucene/index/SegmentCoreReaders;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP41!>;
!CAP41!

***** Found reference cycle *****
SoftReference<ReflectionData<Character>> -> (superclass Reference<ReflectionData<Character>> has (field referent with type ReflectionData<Character>))
ReflectionData<Character> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<Character> subtype of (field paramTypes with type Type))
Class<Character> -> (field reflectionData with type SoftReference<ReflectionData<Character>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Character;>;>;
Ljava/lang/Class$ReflectionData<Ljava/lang/Character;>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<Ljava/lang/Character;>;

***** Found reference cycle *****
NumericTokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (LazyField subtype of (field fields with type Fieldable))
LazyField -> (superclass AbstractField has (NumericTokenStream subtype of (field tokenStream with type TokenStream)))
----- Full Types -----
Lorg/apache/lucene/analysis/NumericTokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP17!>;
!CAP17!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;
Lorg/apache/lucene/index/FieldsReader.LazyField;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP38!>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP38!>;

***** Found reference cycle *****
<captured wildcard> -> (superclass AttributeSource has (HashMap<Class<? extends Attribute>, AttributeImpl> subtype of (field attributes with type Map<Class<? extends Attribute>, AttributeImpl>)))
HashMap<Class<? extends Attribute>, AttributeImpl> -> (field table with type Node<Class<? extends Attribute>, AttributeImpl>)
Node<Class<? extends Attribute>, AttributeImpl> -> (field key with type Class<? extends Attribute>)
Class<? extends Attribute> -> (field cachedConstructor with type Constructor<? extends Attribute>)
Constructor<? extends Attribute> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
----- Full Types -----
!CAP3!
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP3!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP101!>;
Ljava/lang/Class<!CAP101!>;

***** Found reference cycle *****
? extends CharTokenizer -> (superclass CharTokenizer has (superclass Tokenizer has (superclass AttributeSource has (HashMap<Class<? extends Attribute>, AttributeImpl> subtype of (field attributes with type Map<Class<? extends Attribute>, AttributeImpl>)))))
HashMap<Class<? extends Attribute>, AttributeImpl> -> (field table with type Node<Class<? extends Attribute>, AttributeImpl>)
Node<Class<? extends Attribute>, AttributeImpl> -> (field key with type Class<? extends Attribute>)
Class<? extends Attribute> -> (field cachedConstructor with type Constructor<? extends Attribute>)
Constructor<? extends Attribute> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<? extends CharTokenizer> subtype of (field parameterTypeCache with type Type))
Class<? extends CharTokenizer> -> (field enumConstants with type ? extends CharTokenizer)
----- Full Types -----
+Lorg/apache/lucene/analysis/CharTokenizer;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/Attribute;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<+Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
AbstractMap<String, Void> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Void> subtype of (field parameterTypeCache with type Type))
Class<Void> -> (AbstractMap<String, Void> subtype of (field enumConstantDirectory with type Map<String, Void>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/Void;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Void;>;

***** Found reference cycle *****
ReflectionData<Void> -> (field declaredConstructors with type Constructor<Void>)
Constructor<Void> -> (field clazz with type Class<Void>)
Class<Void> -> (field reflectionData with type SoftReference<ReflectionData<Void>>)
SoftReference<ReflectionData<Void>> -> (superclass Reference<ReflectionData<Void>> has (field referent with type ReflectionData<Void>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Ljava/lang/Void;>;
Ljava/lang/reflect/Constructor<Ljava/lang/Void;>;
Ljava/lang/Class<Ljava/lang/Void;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Void;>;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP42!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
HashMap<SegmentInfo, Boolean> -> (superclass AbstractMap<SegmentInfo, Boolean> has (HashSet<SegmentInfo> subtype of (field keySet with type Set<SegmentInfo>)))
HashSet<SegmentInfo> -> (field map with type HashMap<SegmentInfo, Object>)
HashMap<SegmentInfo, Object> -> (superclass AbstractMap<SegmentInfo, Object> has (CollectionView<String, Object, Object> subtype of (field values with type Collection<Object>)))
CollectionView<String, Object, Object> -> (field map with type ConcurrentHashMap<String, Object>)
ConcurrentHashMap<String, Object> -> (superclass AbstractMap<String, Object> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (HashMap<SegmentInfo, Boolean> subtype of (field segmentsToMerge with type Map<SegmentInfo, Boolean>))
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Boolean;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
EntrySetView<Thread, OneMerge> -> (superclass CollectionView<Thread, OneMerge, Entry<Thread, OneMerge>> has (field map with type ConcurrentHashMap<Thread, OneMerge>))
ConcurrentHashMap<Thread, OneMerge> -> (field entrySet with type EntrySetView<Thread, OneMerge>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;

***** Found reference cycle *****
Provider -> (HashMap<String, String> subtype of (field legacyStrings with type Map<String, String>))
HashMap<String, String> -> (superclass AbstractMap<String, String> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (NRTCachingDirectory subtype of (field directory with type Directory))
NRTCachingDirectory -> (field merges with type ConcurrentHashMap<Thread, OneMerge>)
ConcurrentHashMap<Thread, OneMerge> -> (field table with type Node<Thread, OneMerge>)
Node<Thread, OneMerge> -> (field key with type Thread)
Thread -> (field inheritedAccessControlContext with type AccessControlContext)
AccessControlContext -> (field context with type ProtectionDomain)
ProtectionDomain -> (field codesource with type CodeSource)
CodeSource -> (field factory with type CertificateFactory)
CertificateFactory -> (field provider with type Provider)
----- Full Types -----
Ljava/security/Provider;
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/store/NRTCachingDirectory;
Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/util/concurrent/ConcurrentHashMap$Node<Ljava/lang/Thread;Lorg/apache/lucene/index/MergePolicy$OneMerge;>;
Ljava/lang/Thread;
Ljava/security/AccessControlContext;
Ljava/security/ProtectionDomain;
Ljava/security/CodeSource;
Ljava/security/cert/CertificateFactory;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP46!>;>;
Ljava/lang/Class$ReflectionData<!CAP46!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP46!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP34!>;>;
Ljava/lang/Class$ReflectionData<!CAP34!>;
Ljava/lang/reflect/Constructor<!CAP34!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP34!>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field genericInfo with type FieldRepository)
FieldRepository -> (Class<<captured wildcard>> subtype of (field genericType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP106!>;>;
Ljava/lang/Class$ReflectionData<!CAP106!>;
Ljava/lang/reflect/Field;
Lsun/reflect/generics/repository/FieldRepository;
Ljava/lang/Class<!CAP106!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP54!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
<captured wildcard> -> (superclass DirectoryReader has (field writer with type IndexWriter))
IndexWriter -> (NativeFSLock subtype of (field writeLock with type Lock))
NativeFSLock -> (Descriptor subtype of (field f with type RandomAccessFile))
Descriptor -> (superclass RandomAccessFile has (field fd with type FileDescriptor))
FileDescriptor -> (TokenStream subtype of (field parent with type Closeable))
TokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (MethodRepository subtype of (field genericInfo with type ConstructorRepository))
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
----- Full Types -----
!CAP6!
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/store/NativeFSLock;
Lorg/apache/lucene/store/SimpleFSDirectory$SimpleFSIndexInput$Descriptor;
Ljava/io/FileDescriptor;
Lorg/apache/lucene/analysis/TokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP6!>;

***** Found reference cycle *****
FormatPostingsTermsWriter -> (field termsOut with type TermInfosWriter)
TermInfosWriter -> (RAMOutputStream subtype of (field output with type IndexOutput))
RAMOutputStream -> (PerDocBuffer subtype of (field file with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (MappedByteBuffer subtype of (field buffers with type ByteBuffer))
MappedByteBuffer -> (field fd with type FileDescriptor)
FileDescriptor -> (FormatPostingsTermsWriter subtype of (field parent with type Closeable))
----- Full Types -----
Lorg/apache/lucene/index/FormatPostingsTermsWriter;
Lorg/apache/lucene/index/TermInfosWriter;
Lorg/apache/lucene/store/RAMOutputStream;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;
Ljava/nio/MappedByteBuffer;
Ljava/io/FileDescriptor;

***** Found reference cycle *****
ReflectionData<Similarity> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<Similarity> subtype of (field paramTypes with type Type))
Class<Similarity> -> (field reflectionData with type SoftReference<ReflectionData<Similarity>>)
SoftReference<ReflectionData<Similarity>> -> (superclass Reference<ReflectionData<Similarity>> has (field referent with type ReflectionData<Similarity>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/search/Similarity;>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<Lorg/apache/lucene/search/Similarity;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/search/Similarity;>;>;

***** Found reference cycle *****
AbstractMap<String, Set<String>> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field config with type IndexWriterConfig)
IndexWriterConfig -> (SnapshotDeletionPolicy subtype of (field delPolicy with type IndexDeletionPolicy))
SnapshotDeletionPolicy -> (AbstractMap<String, Set<String>> subtype of (field segmentsFileToIDs with type Map<String, Set<String>>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriterConfig;
Lorg/apache/lucene/index/SnapshotDeletionPolicy;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP83!>;
Ljava/lang/reflect/Constructor<!CAP83!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP83!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP83!>;>;

***** Found reference cycle *****
EntrySet -> (outer class CharArrayMap<Object>)
CharArrayMap<Object> -> (field entrySet with type EntrySet)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<Ljava/lang/Object;>.EntrySet;
Lorg/apache/lucene/analysis/CharArrayMap<Ljava/lang/Object;>;

***** Found reference cycle *****
TermsHashConsumer -> (field fieldInfos with type FieldInfos)
FieldInfos -> (field byName with type HashMap<String, FieldInfo>)
HashMap<String, FieldInfo> -> (superclass AbstractMap<String, FieldInfo> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (DocInverter subtype of (field consumer with type DocFieldConsumer))
DocInverter -> (TermsHash subtype of (field consumer with type InvertedDocConsumer))
TermsHash -> (field consumer with type TermsHashConsumer)
----- Full Types -----
Lorg/apache/lucene/index/TermsHashConsumer;
Lorg/apache/lucene/index/FieldInfos;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/FieldInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;
Lorg/apache/lucene/index/DocInverter;
Lorg/apache/lucene/index/TermsHash;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP20!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
WhitespaceTokenizer -> (superclass Tokenizer has (superclass AttributeSource has (HashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>))))
HashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field table with type Node<Class<? extends AttributeImpl>, AttributeImpl>)
Node<Class<? extends AttributeImpl>, AttributeImpl> -> (field key with type Class<? extends AttributeImpl>)
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<CharTokenizer> subtype of (field parameterTypeCache with type Type))
Class<CharTokenizer> -> (WhitespaceTokenizer subtype of (field enumConstants with type CharTokenizer))
----- Full Types -----
Lorg/apache/lucene/analysis/WhitespaceTokenizer;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
TokenFilter -> (superclass TokenStream has (superclass AttributeSource has (HashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>))))
HashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field table with type Node<Class<? extends AttributeImpl>, AttributeImpl>)
Node<Class<? extends AttributeImpl>, AttributeImpl> -> (field key with type Class<? extends AttributeImpl>)
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (LazyField subtype of (field fields with type Fieldable))
LazyField -> (superclass AbstractField has (TokenFilter subtype of (field tokenStream with type TokenStream)))
----- Full Types -----
Lorg/apache/lucene/analysis/TokenFilter;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP17!>;
!CAP17!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;
Lorg/apache/lucene/index/FieldsReader.LazyField;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP17!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<Short>> -> (superclass Reference<ReflectionData<Short>> has (field referent with type ReflectionData<Short>))
ReflectionData<Short> -> (field interfaces with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Short> subtype of (field parameterTypeCache with type Type))
Class<Short> -> (field reflectionData with type SoftReference<ReflectionData<Short>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Ljava/lang/Short;>;>;
Ljava/lang/Class$ReflectionData<Ljava/lang/Short;>;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Short;>;

***** Found reference cycle *****
IntBlockPool -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (TermsHashPerThread subtype of (field consumer with type InvertedDocConsumerPerThread))
TermsHashPerThread -> (field intPool with type IntBlockPool)
----- Full Types -----
Lorg/apache/lucene/index/IntBlockPool;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/TermsHashPerThread;

***** Found reference cycle *****
FreqProxTermsWriter -> (superclass TermsHashConsumer has (field fieldInfos with type FieldInfos))
FieldInfos -> (field byName with type HashMap<String, FieldInfo>)
HashMap<String, FieldInfo> -> (superclass AbstractMap<String, FieldInfo> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (DocFieldProcessor subtype of (field consumer with type DocConsumer))
DocFieldProcessor -> (DocInverter subtype of (field consumer with type DocFieldConsumer))
DocInverter -> (TermsHash subtype of (field consumer with type InvertedDocConsumer))
TermsHash -> (FreqProxTermsWriter subtype of (field consumer with type TermsHashConsumer))
----- Full Types -----
Lorg/apache/lucene/index/FreqProxTermsWriter;
Lorg/apache/lucene/index/FieldInfos;
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/index/FieldInfo;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocFieldProcessor;
Lorg/apache/lucene/index/DocInverter;
Lorg/apache/lucene/index/TermsHash;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP29!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
MMapDirectory -> (superclass FSDirectory has (KeySetView<String, RAMFile> subtype of (field staleFiles with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (CompoundFileReader subtype of (field directory with type Directory))
CompoundFileReader -> (MMapIndexInput subtype of (field stream with type IndexInput))
MMapIndexInput -> (outer class MMapDirectory)
----- Full Types -----
Lorg/apache/lucene/store/MMapDirectory;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/CompoundFileReader;
Lorg/apache/lucene/store/MMapDirectory.MMapIndexInput;

***** Found reference cycle *****
HashMap<String, Integer> -> (superclass AbstractMap<String, Integer> has (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>)))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (field singleToken with type SingleTokenAttributeSource)
SingleTokenAttributeSource -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<Integer> subtype of (field parameterTypeCache with type Type))
Class<Integer> -> (HashMap<String, Integer> subtype of (field enumConstantDirectory with type Map<String, Integer>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;
Lorg/apache/lucene/index/DocInverterPerThread$SingleTokenAttributeSource;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Ljava/lang/Integer;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP30!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP30!>;

***** Found reference cycle *****
ReflectionData<QueryParser> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<QueryParser> subtype of (field superclass with type Type))
Class<QueryParser> -> (field reflectionData with type SoftReference<ReflectionData<QueryParser>>)
SoftReference<ReflectionData<QueryParser>> -> (superclass Reference<ReflectionData<QueryParser>> has (field referent with type ReflectionData<QueryParser>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<Lorg/apache/lucene/queryParser/QueryParser;>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<Lorg/apache/lucene/queryParser/QueryParser;>;>;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredFields with type Field)
Field -> (field clazz with type Class<?>)
Class<?> -> (field cachedConstructor with type Constructor<?>)
Constructor<?> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP93!>;
Ljava/lang/reflect/Field;
Ljava/lang/Class<*>;
Ljava/lang/reflect/Constructor<*>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP93!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP93!>;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP2!>;>;
Ljava/lang/Class$ReflectionData<!CAP2!>;
Ljava/lang/reflect/Constructor<!CAP2!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP2!>;

***** Found reference cycle *****
Node<SegmentInfo, Object> -> (field key with type SegmentInfo)
SegmentInfo -> (AbstractMap<String, String> subtype of (field diagnostics with type Map<String, String>))
AbstractMap<String, String> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field mergingSegments with type HashSet<SegmentInfo>)
HashSet<SegmentInfo> -> (field map with type HashMap<SegmentInfo, Object>)
HashMap<SegmentInfo, Object> -> (field table with type Node<SegmentInfo, Object>)
----- Full Types -----
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;
Lorg/apache/lucene/index/SegmentInfo;
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentInfo;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Object;>;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredConstructors with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP126!>;>;
Ljava/lang/Class$ReflectionData<!CAP126!>;
Ljava/lang/reflect/Constructor<!CAP126!>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP126!>;

***** Found reference cycle *****
StoredFieldsWriterPerThread -> (field docState with type DocState)
DocState -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fieldsWriter with type StoredFieldsWriterPerThread)
----- Full Types -----
Lorg/apache/lucene/index/StoredFieldsWriterPerThread;
Lorg/apache/lucene/index/DocumentsWriter$DocState;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<<captured wildcard>> subtype of (field returnType with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP14!>;>;
Ljava/lang/Class$ReflectionData<!CAP14!>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<!CAP14!>;

***** Found reference cycle *****
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
----- Full Types -----
Ljava/lang/Class<!CAP10!>;
Ljava/lang/reflect/Constructor<!CAP10!>;

***** Found reference cycle *****
NormsWriterPerField -> (field docState with type DocState)
DocState -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (DocInverterPerField subtype of (field consumer with type DocFieldConsumerPerField))
DocInverterPerField -> (NormsWriterPerField subtype of (field endConsumer with type InvertedDocEndConsumerPerField))
----- Full Types -----
Lorg/apache/lucene/index/NormsWriterPerField;
Lorg/apache/lucene/index/DocumentsWriter$DocState;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;
Lorg/apache/lucene/index/DocInverterPerField;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP91!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP91!>;

***** Found reference cycle *****
NoMergePolicy -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (NoMergePolicy subtype of (field mergePolicy with type MergePolicy))
----- Full Types -----
Lorg/apache/lucene/index/NoMergePolicy;
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP68!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP118!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (field clazz with type Class<?>)
Class<?> -> (field genericInfo with type ClassRepository)
ClassRepository -> (Class<<captured wildcard>> subtype of (field superclass with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP136!>;>;
Ljava/lang/Class$ReflectionData<!CAP136!>;
Ljava/lang/reflect/Method;
Ljava/lang/Class<*>;
Lsun/reflect/generics/repository/ClassRepository;
Ljava/lang/Class<!CAP136!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP22!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
ReflectionData<<captured wildcard>> -> (field declaredMethods with type Method)
Method -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field reflectionData with type SoftReference<ReflectionData<<captured wildcard>>>)
SoftReference<ReflectionData<<captured wildcard>>> -> (superclass Reference<ReflectionData<<captured wildcard>>> has (field referent with type ReflectionData<<captured wildcard>>))
----- Full Types -----
Ljava/lang/Class$ReflectionData<!CAP10!>;
Ljava/lang/reflect/Method;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP10!>;
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<!CAP10!>;>;

***** Found reference cycle *****
AbstractMap<String, RefCount> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (field deleter with type IndexFileDeleter)
IndexFileDeleter -> (AbstractMap<String, RefCount> subtype of (field refCounts with type Map<String, RefCount>))
----- Full Types -----
Ljava/util/AbstractMap<Ljava/lang/String;Lorg/apache/lucene/index/IndexFileDeleter$RefCount;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/IndexFileDeleter;

***** Found reference cycle *****
NormsWriterPerThread -> (field docState with type DocState)
DocState -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (DocInverterPerThread subtype of (field consumer with type DocFieldConsumerPerThread))
DocInverterPerThread -> (NormsWriterPerThread subtype of (field endConsumer with type InvertedDocEndConsumerPerThread))
----- Full Types -----
Lorg/apache/lucene/index/NormsWriterPerThread;
Lorg/apache/lucene/index/DocumentsWriter$DocState;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocInverterPerThread;

***** Found reference cycle *****
SoftReference<ReflectionData<? extends CharTokenizer>> -> (superclass Reference<ReflectionData<? extends CharTokenizer>> has (field referent with type ReflectionData<? extends CharTokenizer>))
ReflectionData<? extends CharTokenizer> -> (field declaredMethods with type Method)
Method -> (field genericInfo with type MethodRepository)
MethodRepository -> (Class<? extends CharTokenizer> subtype of (field returnType with type Type))
Class<? extends CharTokenizer> -> (field reflectionData with type SoftReference<ReflectionData<? extends CharTokenizer>>)
----- Full Types -----
Ljava/lang/ref/SoftReference<Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/analysis/CharTokenizer;>;>;
Ljava/lang/Class$ReflectionData<+Lorg/apache/lucene/analysis/CharTokenizer;>;
Ljava/lang/reflect/Method;
Lsun/reflect/generics/repository/MethodRepository;
Ljava/lang/Class<+Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP78!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP78!>;

***** Found reference cycle *****
Field -> (superclass AbstractField has (Tokenizer subtype of (field tokenStream with type TokenStream)))
Tokenizer -> (InputStreamReader subtype of (field input with type Reader))
InputStreamReader -> (field sd with type StreamDecoder)
StreamDecoder -> (FileInputStream subtype of (field in with type InputStream))
FileInputStream -> (field channel with type FileChannel)
FileChannel -> (superclass AbstractInterruptibleChannel has (MergeThread subtype of (field interrupted with type Thread)))
MergeThread -> (field tWriter with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (Field subtype of (field fields with type Fieldable))
----- Full Types -----
Lorg/apache/lucene/document/Field;
Lorg/apache/lucene/analysis/Tokenizer;
Ljava/io/InputStreamReader;
Lsun/nio/cs/StreamDecoder;
Ljava/io/FileInputStream;
Ljava/nio/channels/FileChannel;
Lorg/apache/lucene/index/ConcurrentMergeScheduler.MergeThread;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;

***** Found reference cycle *****
Node<SegmentInfo, Boolean> -> (field key with type SegmentInfo)
SegmentInfo -> (AbstractMap<String, String> subtype of (field diagnostics with type Map<String, String>))
AbstractMap<String, String> -> (KeySetView<String, RAMFile> subtype of (field keySet with type Set<String>))
KeySetView<String, RAMFile> -> (PerDocBuffer subtype of (field value with type RAMFile))
PerDocBuffer -> (outer class DocumentsWriter)
DocumentsWriter -> (field writer with type IndexWriter)
IndexWriter -> (HashMap<SegmentInfo, Boolean> subtype of (field segmentsToMerge with type Map<SegmentInfo, Boolean>))
HashMap<SegmentInfo, Boolean> -> (field table with type Node<SegmentInfo, Boolean>)
----- Full Types -----
Ljava/util/HashMap$Node<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Boolean;>;
Lorg/apache/lucene/index/SegmentInfo;
Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;>;
Lorg/apache/lucene/index/DocumentsWriter.PerDocBuffer;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/IndexWriter;
Ljava/util/HashMap<Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/Boolean;>;

***** Found reference cycle *****
Constructor<Float> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<Float> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<Ljava/lang/Float;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP44!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
LetterTokenizer -> (superclass CharTokenizer has (superclass Tokenizer has (superclass AttributeSource has (HashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))))
HashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field table with type Node<Class<? extends AttributeImpl>, AttributeImpl>)
Node<Class<? extends AttributeImpl>, AttributeImpl> -> (field key with type Class<? extends AttributeImpl>)
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<CharTokenizer> subtype of (field parameterTypeCache with type Type))
Class<CharTokenizer> -> (LetterTokenizer subtype of (field enumConstants with type CharTokenizer))
----- Full Types -----
Lorg/apache/lucene/analysis/LetterTokenizer;
Ljava/util/HashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<Lorg/apache/lucene/analysis/CharTokenizer;>;

***** Found reference cycle *****
SinkTokenStream -> (superclass AttributeSource has (LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> subtype of (field attributeImpls with type Map<Class<? extends AttributeImpl>, AttributeImpl>)))
LinkedHashMap<Class<? extends AttributeImpl>, AttributeImpl> -> (field head with type Entry<Class<? extends AttributeImpl>, AttributeImpl>)
Entry<Class<? extends AttributeImpl>, AttributeImpl> -> (superclass Node<Class<? extends AttributeImpl>, AttributeImpl> has (field key with type Class<? extends AttributeImpl>))
Class<? extends AttributeImpl> -> (field cachedConstructor with type Constructor<? extends AttributeImpl>)
Constructor<? extends AttributeImpl> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Class<<captured wildcard>> subtype of (field parameterTypeCache with type Type))
Class<<captured wildcard>> -> (field enumConstants with type <captured wildcard>)
<captured wildcard> -> (superclass MergePolicy has (field writer with type SetOnce<IndexWriter>))
SetOnce<IndexWriter> -> (field obj with type IndexWriter)
IndexWriter -> (field docWriter with type DocumentsWriter)
DocumentsWriter -> (field waitQueue with type WaitQueue)
WaitQueue -> (PerDoc subtype of (field waiting with type DocWriter))
PerDoc -> (outer class DocFieldProcessorPerThread)
DocFieldProcessorPerThread -> (field fields with type DocFieldProcessorPerField)
DocFieldProcessorPerField -> (LazyField subtype of (field fields with type Fieldable))
LazyField -> (superclass AbstractField has (SinkTokenStream subtype of (field tokenStream with type TokenStream)))
----- Full Types -----
Lorg/apache/lucene/analysis/TeeSinkTokenFilter$SinkTokenStream;
Ljava/util/LinkedHashMap<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/util/LinkedHashMap$Entry<Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/Class<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/util/AttributeImpl;>;
Ljava/lang/reflect/Parameter;
Ljava/lang/Class<!CAP17!>;
!CAP17!
Lorg/apache/lucene/util/SetOnce<Lorg/apache/lucene/index/IndexWriter;>;
Lorg/apache/lucene/index/IndexWriter;
Lorg/apache/lucene/index/DocumentsWriter;
Lorg/apache/lucene/index/DocumentsWriter.WaitQueue;
Lorg/apache/lucene/index/DocFieldProcessorPerThread.PerDoc;
Lorg/apache/lucene/index/DocFieldProcessorPerThread;
Lorg/apache/lucene/index/DocFieldProcessorPerField;
Lorg/apache/lucene/index/FieldsReader.LazyField;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field clazz with type Class<<captured wildcard>>)
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP106!>;
Ljava/lang/Class<!CAP106!>;

***** Found reference cycle *****
Constructor<? extends NLS> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<? extends NLS> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<+Lorg/apache/lucene/messages/NLS;>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (field genericInfo with type ConstructorRepository)
ConstructorRepository -> (Class<<captured wildcard>> subtype of (field paramTypes with type Type))
Class<<captured wildcard>> -> (field cachedConstructor with type Constructor<<captured wildcard>>)
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP66!>;
Lsun/reflect/generics/repository/ConstructorRepository;
Ljava/lang/Class<!CAP66!>;

***** Found reference cycle *****
Constructor<<captured wildcard>> -> (superclass Executable has (field parameters with type Parameter))
Parameter -> (Constructor<<captured wildcard>> subtype of (field executable with type Executable))
----- Full Types -----
Ljava/lang/reflect/Constructor<!CAP8!>;
Ljava/lang/reflect/Parameter;

***** Found reference cycle *****
HashSet<Integer> -> (field map with type HashMap<Integer, Object>)
HashMap<Integer, Object> -> (superclass AbstractMap<Integer, Object> has (HashSet<Integer> subtype of (field keySet with type Set<Integer>)))
----- Full Types -----
Ljava/util/HashSet<Ljava/lang/Integer;>;
Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/Object;>;

***** Found reference cycle *****
BytesWriter -> (outer class FST<T>)
FST<T> -> (field writer with type BytesWriter)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/NodeHash:T;>.BytesWriter;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/NodeHash:T;>;

***** Found reference cycle *****
HashSet<DocFieldConsumerPerField> -> (field map with type HashMap<DocFieldConsumerPerField, Object>)
HashMap<DocFieldConsumerPerField, Object> -> (superclass AbstractMap<DocFieldConsumerPerField, Object> has (HashSet<DocFieldConsumerPerField> subtype of (field keySet with type Set<DocFieldConsumerPerField>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/index/DocFieldConsumerPerField;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/DocFieldConsumerPerField;Ljava/lang/Object;>;

***** Found reference cycle *****
Coordinator -> (outer class BooleanScorer2)
BooleanScorer2 -> (field coordinator with type Coordinator)
----- Full Types -----
Lorg/apache/lucene/search/BooleanScorer2.Coordinator;
Lorg/apache/lucene/search/BooleanScorer2;

***** Found reference cycle *****
anonymous:169 -> (field queue with type SpanQueue)
SpanQueue -> (superclass PriorityQueue<Spans> has (anonymous:169 subtype of (field heap with type Spans)))
----- Full Types -----
Lorg/apache/lucene/search/spans/SpanOrQuery.1;
Lorg/apache/lucene/search/spans/SpanOrQuery.SpanQueue;

***** Found reference cycle *****
GroupHead -> (outer class OrdAllGroupHeadsCollector)
OrdAllGroupHeadsCollector -> (field segmentGroupHeads with type GroupHead)
----- Full Types -----
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdAllGroupHeadsCollector;

***** Found reference cycle *****
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class OrdAllGroupHeadsCollector)
OrdAllGroupHeadsCollector -> (superclass TermAllGroupHeadsCollector<GroupHead> has (superclass AbstractAllGroupHeadsCollector<GroupHead> has (field temporalResult with type TemporalResult)))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdAllGroupHeadsCollector;

***** Found reference cycle *****
AbstractAllGroupHeadsCollector<GroupHead> -> (field temporalResult with type TemporalResult)
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class ScoreAllGroupHeadsCollector)
ScoreAllGroupHeadsCollector -> (BooleanScorer subtype of (field scorer with type Scorer))
BooleanScorer -> (field scorers with type SubScorer)
SubScorer -> (AbstractAllGroupHeadsCollector<GroupHead> subtype of (field collector with type Collector))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$ScoreAllGroupHeadsCollector.GroupHead;>;
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$ScoreAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$ScoreAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$ScoreAllGroupHeadsCollector;
Lorg/apache/lucene/search/BooleanScorer;
Lorg/apache/lucene/search/BooleanScorer$SubScorer;

***** Found reference cycle *****
HashMap<String, GroupHead> -> (field table with type Node<String, GroupHead>)
Node<String, GroupHead> -> (field value with type GroupHead)
GroupHead -> (outer class GeneralAllGroupHeadsCollector)
GeneralAllGroupHeadsCollector -> (HashMap<String, GroupHead> subtype of (field groups with type Map<String, GroupHead>))
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;>;
Ljava/util/HashMap$Node<Ljava/lang/String;Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;>;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector;

***** Found reference cycle *****
PositiveScoresOnlyCollector -> (BooleanScorer subtype of (field scorer with type Scorer))
BooleanScorer -> (field scorers with type SubScorer)
SubScorer -> (PositiveScoresOnlyCollector subtype of (field collector with type Collector))
----- Full Types -----
Lorg/apache/lucene/search/PositiveScoresOnlyCollector;
Lorg/apache/lucene/search/BooleanScorer;
Lorg/apache/lucene/search/BooleanScorer$SubScorer;

***** Found reference cycle *****
HeapedScorerDoc -> (DisjunctionSumScorer subtype of (field scorer with type Scorer))
DisjunctionSumScorer -> (field scorerDocQueue with type ScorerDocQueue)
ScorerDocQueue -> (field heap with type HeapedScorerDoc)
----- Full Types -----
Lorg/apache/lucene/util/ScorerDocQueue.HeapedScorerDoc;
Lorg/apache/lucene/search/DisjunctionSumScorer;
Lorg/apache/lucene/util/ScorerDocQueue;

***** Found reference cycle *****
OrdScoreAllGroupHeadsCollector -> (field segmentGroupHeads with type GroupHead)
GroupHead -> (outer class OrdScoreAllGroupHeadsCollector)
----- Full Types -----
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;

***** Found reference cycle *****
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class OrdScoreAllGroupHeadsCollector)
OrdScoreAllGroupHeadsCollector -> (superclass TermAllGroupHeadsCollector<GroupHead> has (superclass AbstractAllGroupHeadsCollector<GroupHead> has (field temporalResult with type TemporalResult)))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector;

***** Found reference cycle *****
GroupQueue -> (outer class BlockGroupingCollector)
BlockGroupingCollector -> (field groupQueue with type GroupQueue)
----- Full Types -----
Lorg/apache/lucene/search/grouping/BlockGroupingCollector.GroupQueue;
Lorg/apache/lucene/search/grouping/BlockGroupingCollector;

***** Found reference cycle *****
BooleanScorerCollector -> (BooleanScorer subtype of (field scorer with type Scorer))
BooleanScorer -> (field scorers with type SubScorer)
SubScorer -> (BooleanScorerCollector subtype of (field collector with type Collector))
----- Full Types -----
Lorg/apache/lucene/search/BooleanScorer$BooleanScorerCollector;
Lorg/apache/lucene/search/BooleanScorer;
Lorg/apache/lucene/search/BooleanScorer$SubScorer;

***** Found reference cycle *****
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class GeneralAllGroupHeadsCollector)
GeneralAllGroupHeadsCollector -> (superclass TermAllGroupHeadsCollector<GroupHead> has (superclass AbstractAllGroupHeadsCollector<GroupHead> has (field temporalResult with type TemporalResult)))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector;

***** Found reference cycle *****
AbstractAllGroupHeadsCollector<GroupHead> -> (field temporalResult with type TemporalResult)
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class GeneralAllGroupHeadsCollector)
GeneralAllGroupHeadsCollector -> (BooleanScorer subtype of (field scorer with type Scorer))
BooleanScorer -> (field scorers with type SubScorer)
SubScorer -> (AbstractAllGroupHeadsCollector<GroupHead> subtype of (field collector with type Collector))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;>;
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$GeneralAllGroupHeadsCollector;
Lorg/apache/lucene/search/BooleanScorer;
Lorg/apache/lucene/search/BooleanScorer$SubScorer;

***** Found reference cycle *****
AbstractAllGroupHeadsCollector<GroupHead> -> (field temporalResult with type TemporalResult)
TemporalResult -> (field groupHead with type GroupHead)
GroupHead -> (outer class OrdScoreAllGroupHeadsCollector)
OrdScoreAllGroupHeadsCollector -> (BooleanScorer subtype of (field scorer with type Scorer))
BooleanScorer -> (field scorers with type SubScorer)
SubScorer -> (AbstractAllGroupHeadsCollector<GroupHead> subtype of (field collector with type Collector))
----- Full Types -----
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;>;
Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector<Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;>.TemporalResult;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector.GroupHead;
Lorg/apache/lucene/search/grouping/TermAllGroupHeadsCollector$OrdScoreAllGroupHeadsCollector;
Lorg/apache/lucene/search/BooleanScorer;
Lorg/apache/lucene/search/BooleanScorer$SubScorer;

***** Found reference cycle *****
FST<T> -> (field writer with type BytesWriter)
BytesWriter -> (outer class FST<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/Builder:T;>;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/Builder:T;>.BytesWriter;

***** Found reference cycle *****
HashSet<InvertedDocConsumerPerField> -> (field map with type HashMap<InvertedDocConsumerPerField, Object>)
HashMap<InvertedDocConsumerPerField, Object> -> (superclass AbstractMap<InvertedDocConsumerPerField, Object> has (HashSet<InvertedDocConsumerPerField> subtype of (field keySet with type Set<InvertedDocConsumerPerField>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/index/InvertedDocConsumerPerField;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/InvertedDocConsumerPerField;Ljava/lang/Object;>;

***** Found reference cycle *****
HashMap<Currency, Object> -> (superclass AbstractMap<Currency, Object> has (HashSet<Currency> subtype of (field keySet with type Set<Currency>)))
HashSet<Currency> -> (field map with type HashMap<Currency, Object>)
----- Full Types -----
Ljava/util/HashMap<Ljava/util/Currency;Ljava/lang/Object;>;
Ljava/util/HashSet<Ljava/util/Currency;>;

***** Found reference cycle *****
HashSet<InvertedDocEndConsumerPerField> -> (field map with type HashMap<InvertedDocEndConsumerPerField, Object>)
HashMap<InvertedDocEndConsumerPerField, Object> -> (superclass AbstractMap<InvertedDocEndConsumerPerField, Object> has (HashSet<InvertedDocEndConsumerPerField> subtype of (field keySet with type Set<InvertedDocEndConsumerPerField>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/index/InvertedDocEndConsumerPerField;>;
Ljava/util/HashMap<Lorg/apache/lucene/index/InvertedDocEndConsumerPerField;Ljava/lang/Object;>;

***** Found reference cycle *****
HashMap<Method, Object> -> (superclass AbstractMap<Method, Object> has (HashSet<Method> subtype of (field keySet with type Set<Method>)))
HashSet<Method> -> (field map with type HashMap<Method, Object>)
----- Full Types -----
Ljava/util/HashMap<Ljava/lang/reflect/Method;Ljava/lang/Object;>;
Ljava/util/HashSet<Ljava/lang/reflect/Method;>;

***** Found reference cycle *****
FST<T> -> (field writer with type BytesWriter)
BytesWriter -> (outer class FST<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/IntsRefFSTEnum:T;>;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/IntsRefFSTEnum:T;>.BytesWriter;

***** Found reference cycle *****
HashSet<ReaderField> -> (field map with type HashMap<ReaderField, Object>)
HashMap<ReaderField, Object> -> (superclass AbstractMap<ReaderField, Object> has (HashSet<ReaderField> subtype of (field keySet with type Set<ReaderField>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/util/FieldCacheSanityChecker$ReaderField;>;
Ljava/util/HashMap<Lorg/apache/lucene/util/FieldCacheSanityChecker$ReaderField;Ljava/lang/Object;>;

***** Found reference cycle *****
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (LongCache subtype of (field value with type Cache))
LongCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Lorg/apache/lucene/search/FieldCacheImpl$LongCache;

***** Found reference cycle *****
FloatCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (FloatCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$FloatCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
StringCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (StringCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$StringCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
Cache -> (field wrapper with type FieldCacheImpl)
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (field value with type Cache)
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$Cache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
StringIndexCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (StringIndexCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$StringIndexCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
DoubleCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (DoubleCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$DoubleCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
DocsWithFieldCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (DocsWithFieldCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$DocsWithFieldCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
IntCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (IntCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$IntCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
ByteCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (ByteCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$ByteCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
ShortCache -> (superclass Cache has (field wrapper with type FieldCacheImpl))
FieldCacheImpl -> (HashMap<Class<?>, Cache> subtype of (field caches with type Map<Class<?>, Cache>))
HashMap<Class<?>, Cache> -> (field table with type Node<Class<?>, Cache>)
Node<Class<?>, Cache> -> (ShortCache subtype of (field value with type Cache))
----- Full Types -----
Lorg/apache/lucene/search/FieldCacheImpl$ShortCache;
Lorg/apache/lucene/search/FieldCacheImpl;
Ljava/util/HashMap<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;
Ljava/util/HashMap$Node<Ljava/lang/Class<*>;Lorg/apache/lucene/search/FieldCacheImpl$Cache;>;

***** Found reference cycle *****
FST<T> -> (field writer with type BytesWriter)
BytesWriter -> (outer class FST<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<TT;>;
Lorg/apache/lucene/util/fst/FST<TT;>.BytesWriter;

***** Found reference cycle *****
BytesWriter -> (outer class FST<T>)
FST<T> -> (field writer with type BytesWriter)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/BytesRefFSTEnum:T;>.BytesWriter;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/BytesRefFSTEnum:T;>;

***** Found reference cycle *****
BytesWriter -> (outer class FST<T>)
FST<T> -> (field writer with type BytesWriter)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/Builder$UnCompiledNode:T;>.BytesWriter;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/Builder$UnCompiledNode:T;>;

***** Found reference cycle *****
BytesWriter -> (outer class FST<T>)
FST<T> -> (field writer with type BytesWriter)
----- Full Types -----
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/FSTEnum:T;>.BytesWriter;
Lorg/apache/lucene/util/fst/FST<T:org/apache/lucene/util/fst/FSTEnum:T;>;

***** Found reference cycle *****
EntrySet -> (outer class CharArrayMap<V>)
CharArrayMap<V> -> (field entrySet with type EntrySet)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap$EmptyCharArrayMap:V;>.EntrySet;
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap$EmptyCharArrayMap:V;>;

***** Found reference cycle *****
CharArrayMap<V> -> (field entrySet with type EntrySet)
EntrySet -> (outer class CharArrayMap<V>)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<TV;>;
Lorg/apache/lucene/analysis/CharArrayMap<TV;>.EntrySet;

***** Found reference cycle *****
CharArrayMap<V> -> (field entrySet with type EntrySet)
EntrySet -> (outer class CharArrayMap<V>)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap$UnmodifiableCharArrayMap:V;>;
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap$UnmodifiableCharArrayMap:V;>.EntrySet;

***** Found reference cycle *****
NormalizeCharMap -> (HashMap<Character, NormalizeCharMap> subtype of (field submap with type Map<Character, NormalizeCharMap>))
HashMap<Character, NormalizeCharMap> -> (field table with type Node<Character, NormalizeCharMap>)
Node<Character, NormalizeCharMap> -> (field value with type NormalizeCharMap)
----- Full Types -----
Lorg/apache/lucene/analysis/NormalizeCharMap;
Ljava/util/HashMap<Ljava/lang/Character;Lorg/apache/lucene/analysis/NormalizeCharMap;>;
Ljava/util/HashMap$Node<Ljava/lang/Character;Lorg/apache/lucene/analysis/NormalizeCharMap;>;

***** Found reference cycle *****
SubIterator -> (anonymous:87 subtype of (field iterator with type Iterator<Term>))
anonymous:87 -> (field top with type SubIterator)
----- Full Types -----
Lorg/apache/lucene/index/CoalescedDeletes$SubIterator;
Lorg/apache/lucene/index/CoalescedDeletes$3;

***** Found reference cycle *****
TermMergeQueue -> (superclass PriorityQueue<SubIterator> has (field heap with type SubIterator))
SubIterator -> (anonymous:87 subtype of (field iterator with type Iterator<Term>))
anonymous:87 -> (field queue with type TermMergeQueue)
----- Full Types -----
Lorg/apache/lucene/index/CoalescedDeletes$TermMergeQueue;
Lorg/apache/lucene/index/CoalescedDeletes$SubIterator;
Lorg/apache/lucene/index/CoalescedDeletes$3;

***** Found reference cycle *****
UnCompiledNode<T> -> (field owner with type Builder<T>)
Builder<T> -> (field frontier with type UnCompiledNode<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;
Lorg/apache/lucene/util/fst/Builder<T:org/apache/lucene/util/fst/Builder$UnCompiledNode:T;>;

***** Found reference cycle *****
Builder<T> -> (field frontier with type UnCompiledNode<T>)
UnCompiledNode<T> -> (field owner with type Builder<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/Builder<TT;>;
Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<T:org/apache/lucene/util/fst/Builder:T;>;

***** Found reference cycle *****
Arc<T> -> (UnCompiledNode<T> subtype of (field target with type Node))
UnCompiledNode<T> -> (field arcs with type Arc<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/Builder$Arc<T:org/apache/lucene/util/fst/Builder$UnCompiledNode:T;>;
Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;

***** Found reference cycle *****
Arc<T> -> (UnCompiledNode<T> subtype of (field target with type Node))
UnCompiledNode<T> -> (field arcs with type Arc<T>)
----- Full Types -----
Lorg/apache/lucene/util/fst/Builder$Arc<T:org/apache/lucene/util/fst/Builder:T;>;
Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<T:org/apache/lucene/util/fst/Builder:T;>;

***** Found reference cycle *****
EntrySet -> (outer class CharArrayMap<V>)
CharArrayMap<V> -> (field entrySet with type EntrySet)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap.copy(Lorg/apache/lucene/util/Version;Ljava/util/Map;):V;>.EntrySet;
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap.copy(Lorg/apache/lucene/util/Version;Ljava/util/Map;):V;>;

***** Found reference cycle *****
HashMap<V, Object> -> (superclass AbstractMap<V, Object> has (HashSet<V> subtype of (field keySet with type Set<V>)))
HashSet<V> -> (field map with type HashMap<V, Object>)
----- Full Types -----
Ljava/util/HashMap<T:org/apache/lucene/util/MapOfSets:V;Ljava/lang/Object;>;
Ljava/util/HashSet<T:org/apache/lucene/util/MapOfSets:V;>;

***** Found reference cycle *****
ValuesView<K, V> -> (superclass CollectionView<K, V, V> has (field map with type ConcurrentHashMap<K, V>))
ConcurrentHashMap<K, V> -> (field values with type ValuesView<K, V>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$ValuesView<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;
Ljava/util/concurrent/ConcurrentHashMap<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;

***** Found reference cycle *****
CollectionView<K, V, V> -> (field map with type ConcurrentHashMap<K, V>)
ConcurrentHashMap<K, V> -> (superclass AbstractMap<K, V> has (CollectionView<K, V, V> subtype of (field values with type Collection<V>)))
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$CollectionView<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;
Ljava/util/concurrent/ConcurrentHashMap<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;

***** Found reference cycle *****
EntrySetView<K, V> -> (superclass CollectionView<K, V, Entry<K, V>> has (field map with type ConcurrentHashMap<K, V>))
ConcurrentHashMap<K, V> -> (field entrySet with type EntrySetView<K, V>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$EntrySetView<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;
Ljava/util/concurrent/ConcurrentHashMap<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;

***** Found reference cycle *****
KeySetView<K, V> -> (superclass CollectionView<K, V, K> has (field map with type ConcurrentHashMap<K, V>))
ConcurrentHashMap<K, V> -> (field keySet with type KeySetView<K, V>)
----- Full Types -----
Ljava/util/concurrent/ConcurrentHashMap$KeySetView<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;
Ljava/util/concurrent/ConcurrentHashMap<T:org/apache/lucene/util/DoubleBarrelLRUCache:K;T:org/apache/lucene/util/DoubleBarrelLRUCache:V;>;

***** Found reference cycle *****
HashMap<BooleanClause, Object> -> (superclass AbstractMap<BooleanClause, Object> has (HashSet<BooleanClause> subtype of (field keySet with type Set<BooleanClause>)))
HashSet<BooleanClause> -> (field map with type HashMap<BooleanClause, Object>)
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/search/BooleanClause;Ljava/lang/Object;>;
Ljava/util/HashSet<Lorg/apache/lucene/search/BooleanClause;>;

***** Found reference cycle *****
HashMap<byte[], Object> -> (superclass AbstractMap<byte[], Object> has (HashSet<byte[]> subtype of (field keySet with type Set<byte[]>)))
HashSet<byte[]> -> (field map with type HashMap<byte[], Object>)
----- Full Types -----
Ljava/util/HashMap<[BLjava/lang/Object;>;
Ljava/util/HashSet<[B>;

***** Found reference cycle *****
CharArrayMap<?> -> (field entrySet with type EntrySet)
EntrySet -> (outer class CharArrayMap<?>)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<*>;
Lorg/apache/lucene/analysis/CharArrayMap<*>.EntrySet;

***** Found reference cycle *****
CharArrayMap<V> -> (field entrySet with type EntrySet)
EntrySet -> (outer class CharArrayMap<V>)
----- Full Types -----
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap.unmodifiableMap(Lorg/apache/lucene/analysis/CharArrayMap;):V;>;
Lorg/apache/lucene/analysis/CharArrayMap<T:org/apache/lucene/analysis/CharArrayMap.unmodifiableMap(Lorg/apache/lucene/analysis/CharArrayMap;):V;>.EntrySet;

***** Found reference cycle *****
HashMap<DocConsumerPerThread, Object> -> (superclass AbstractMap<DocConsumerPerThread, Object> has (HashSet<DocConsumerPerThread> subtype of (field keySet with type Set<DocConsumerPerThread>)))
HashSet<DocConsumerPerThread> -> (field map with type HashMap<DocConsumerPerThread, Object>)
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/DocConsumerPerThread;Ljava/lang/Object;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/DocConsumerPerThread;>;

***** Found reference cycle *****
CacheKey -> (field loaderRef with type LoaderReference)
LoaderReference -> (field cacheKey with type CacheKey)
----- Full Types -----
Ljava/util/ResourceBundle$CacheKey;
Ljava/util/ResourceBundle$LoaderReference;

***** Found reference cycle *****
HashSet<Directory> -> (field map with type HashMap<Directory, Object>)
HashMap<Directory, Object> -> (superclass AbstractMap<Directory, Object> has (HashSet<Directory> subtype of (field keySet with type Set<Directory>)))
----- Full Types -----
Ljava/util/HashSet<Lorg/apache/lucene/store/Directory;>;
Ljava/util/HashMap<Lorg/apache/lucene/store/Directory;Ljava/lang/Object;>;

***** Found reference cycle *****
FilterManager -> (field filterCleaner with type FilterCleaner)
FilterCleaner -> (outer class FilterManager)
----- Full Types -----
Lorg/apache/lucene/search/FilterManager;
Lorg/apache/lucene/search/FilterManager.FilterCleaner;

***** Found reference cycle *****
HashMap<TermsHashConsumerPerField, Object> -> (superclass AbstractMap<TermsHashConsumerPerField, Object> has (HashSet<TermsHashConsumerPerField> subtype of (field keySet with type Set<TermsHashConsumerPerField>)))
HashSet<TermsHashConsumerPerField> -> (field map with type HashMap<TermsHashConsumerPerField, Object>)
----- Full Types -----
Ljava/util/HashMap<Lorg/apache/lucene/index/TermsHashConsumerPerField;Ljava/lang/Object;>;
Ljava/util/HashSet<Lorg/apache/lucene/index/TermsHashConsumerPerField;>;

534 CYCLES FOUND.
